{"version":3,"sources":["../node_modules/slate-react/node_modules/tiny-invariant/dist/tiny-invariant.esm.js","../../../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../../../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../src/components/string.tsx","../../src/utils/weak-maps.ts","../../src/components/leaf.tsx","../../src/utils/environment.ts","../../src/hooks/use-isomorphic-layout-effect.ts","../../src/utils/range-list.ts","../../src/components/text.tsx","../../src/hooks/use-selected.ts","../../src/components/element.tsx","../../src/hooks/use-slate-static.tsx","../../src/hooks/use-decorate.ts","../../src/hooks/use-children.tsx","../../src/utils/hotkeys.ts","../../src/hooks/use-read-only.ts","../../src/hooks/use-slate.tsx","../../src/utils/dom.ts","../../src/components/editable.tsx","../../src/utils/key.ts","../../src/plugin/react-editor.ts","../../src/components/android/diff-text.ts","../../src/components/android/restore-dom.ts","../../src/components/android/android-input-manager.ts","../../src/components/android/mutation-detection.ts","../../src/components/android/use-android-input-manager.ts","../../src/components/android/use-track-user-input.ts","../../src/components/android/use-mutation-observer.ts","../../src/hooks/use-focused.ts","../../src/components/slate.tsx","../../src/utils/lines.ts","../../src/plugin/with-react.ts","../../src/index.ts","../../src/components/android/android-editable.tsx","../node_modules/lodash/debounce.js","../node_modules/is-hotkey/lib/index.js","../../../src/components/DialogVisibleProvider.tsx","../node_modules/lodash/now.js","../node_modules/scroll-into-view-if-needed/es/index.js","../node_modules/direction/index.js","../node_modules/lodash/throttle.js"],"names":["prefix","invariant","condition","message","Error","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_objectWithoutProperties","source","excluded","i","target","sourceKeys","keys","length","indexOf","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","String","props","text","editor","useSlateStatic","path","ReactEditor","parentPath","Path","Node","leaf","parent","Editor","React","isLast","isTrailing","isLineBreak","TextString","ZeroWidthString","NODE_TO_INDEX","NODE_TO_PARENT","EDITOR_TO_WINDOW","EDITOR_TO_ELEMENT","ELEMENT_TO_NODE","KEY_TO_ELEMENT","NODE_TO_ELEMENT","NODE_TO_KEY","IS_READ_ONLY","IS_FOCUSED","EDITOR_TO_ON_CHANGE","EDITOR_TO_RESTORE_DOM","PLACEHOLDER_SYMBOL","Symbol","keyForString","Leaf","renderLeaf","placeholderRef","useRef","useEffect","placeholderEl","editorEl","document","children","placeholderProps","attributes","style","position","pointerEvents","width","maxWidth","display","opacity","userSelect","textDecoration","contentEditable","ref","renderPlaceholder","MemoizedLeaf","next","prev","Text","DefaultLeaf","IS_IOS","navigator","window","test","IS_APPLE","IS_ANDROID","IS_FIREFOX","IS_SAFARI","IS_EDGE_LEGACY","IS_CHROME","IS_CHROME_LEGACY","IS_FIREFOX_LEGACY","CAN_USE_DOM","HAS_BEFORE_INPUT_SUPPORT","globalThis","useIsomorphicLayoutEffect","shallowCompare","obj1","obj2","isDecoratorRangeListEqual","list","another","range","other","rangeOwnProps","otherOwnProps","Range","leaves","SlateText","MemoizedText","SelectedContext","createContext","useSelected","useContext","Element","renderElement","p","selection","readOnly","useReadOnly","isInline","useChildren","decorations","node","dir","getDirection","Tag","height","color","outline","element","MemoizedElement","DefaultElement","EditorContext","DecorateContext","decorate","isLeafBlock","n","sel","ds","d","id","HOTKEYS","bold","compose","moveBackward","moveForward","moveWordBackward","moveWordForward","deleteBackward","deleteForward","extendBackward","extendForward","italic","splitBlock","undo","APPLE_HOTKEYS","moveLineBackward","moveLineForward","deleteLineBackward","deleteLineForward","deleteWordBackward","deleteWordForward","extendLineBackward","extendLineForward","redo","transposeCharacter","WINDOWS_HOTKEYS","create","generic","apple","windows","isGeneric","isKeyHotkey","isApple","isWindows","event","isBold","isCompose","isMoveBackward","isMoveForward","isDeleteBackward","isDeleteForward","isDeleteLineBackward","isDeleteLineForward","isDeleteWordBackward","isDeleteWordForward","isExtendBackward","isExtendForward","isExtendLineBackward","isExtendLineForward","isItalic","isMoveLineBackward","isMoveLineForward","isMoveWordBackward","isMoveWordForward","isRedo","isSplitBlock","isTransposeCharacter","isUndo","ReadOnlyContext","SlateContext","useSlate","context","getDefaultView","isDOMElement","isDOMNode","isDOMSelection","isDOMText","getEditableChildAndIndex","childNodes","child","triedForward","triedBackward","isDOMComment","index","direction","getEditableChild","getPlainText","domNode","Array","getComputedStyle","Children","DefaultPlaceholder","defaultDecorate","defaultScrollSelectionIntoView","leafEl","domRange","scrollIntoView","scrollMode","hasTarget","hasEditableTarget","editable","isTargetInsideVoid","slateNode","isEventHandled","shouldTreatEventAsHandled","handler","isDOMEventHandled","Key","constructor","this","getWindow","findKey","findPath","JSON","findDocumentOrShadowRoot","el","root","isFocused","isReadOnly","blur","focus","preventScroll","deselect","domSelection","Transforms","hasDOMNode","options","targetEl","err","insertData","setFragmentData","toDOMNode","toDOMPoint","point","at","offset","start","attr","end","parseInt","domPoint","Math","toDOMRange","isBackward","domAnchor","domFocus","isStartAtZeroWidth","startNode","startEl","isEndAtZeroWidth","endNode","endEl","toSlateNode","domEl","findEventRange","clientX","clientY","x","y","rect","isPrev","edge","exactMatch","toSlatePoint","normalizeDOMPoint","parentNode","nearestNode","textNode","voidNode","leafNode","contents","removals","toSlateRange","anchorNode","anchorOffset","focusNode","focusOffset","isCollapsed","anchor","hasRange","getDiffOffsets","getDiffStart","prevLength","nextLength","getDiffEnd","sliceText","offsets","getTextInsertion","prevText","nextText","textDiff","insertText","removeText","diffText","normalizeTextInsertionRange","insertionRange","match","isText","characterBeforeAnchor","characterAfterAnchor","restoreDOM","onRestoreDOM","console","AndroidInputManager","flush","mutations","reconcileMutations","mutationData","addedNodes","removedNodes","insertedText","characterDataMutations","mutation","addedNode","removedNode","textInsertion","gatherMutationData","isReplaceExpandedSelection","combineInsertedText","parentDOMNode","isRemoveLeafNodes","insertion","insertBreak","setTimeout","replaceExpandedSelection","removeLeafNodes","nodes","MUTATION_OBSERVER_CONFIG","childList","characterData","characterDataOldValue","subtree","useAndroidInputManager","useState","receivedUserInput","animationFrameRef","onUserInput","useCallback","useTrackUserInput","timeoutId","isReconciling","callback","MutationObserver","mutationObserver","useMutationObserver","inputManager","clearTimeout","FocusedContext","useFocused","Slate","useMemo","onContextChange","onChange","setKey","setIsFocused","fn","doRectsIntersect","middle","compareRect","areRangesSameLine","rect1","rect2","withReact","e","unit","parentBlockEntry","parentElementRange","currentLineRange","parentRangeBoundary","positions","parentRange","left","right","findCurrentLineRange","op","matches","apply","data","startVoid","endVoid","attach","r","zw","isNewline","span","fragment","string","encoded","encodeURIComponent","div","decoded","decodeURIComponent","parsed","lines","split","always","ReactDOM","Editable","onDOMBeforeInput","as","Component","state","isUpdatingSelection","latestElement","setContentKey","hasDomSelection","editorElement","hasDomSelectionInEditor","slateRange","newDomRange","boundary","contentKey","onDOMSelectionChange","throttle","activeElement","anchorNodeSelectable","focusNodeSelectable","placeholder","role","undefined","spellCheck","autoCorrect","autoCapitalize","suppressContentEditableWarning","whiteSpace","wordWrap","onCopy","onCut","onFocus","onBlur","relatedTarget","onPaste","scrollSelectionIntoView","isComposing","isDraggingInternally","type","inputType","setIsComposing","onBeforeInput","onClick","onCompositionEnd","onCompositionUpdate","onCompositionStart","onDragOver","onDragStart","voids","onDrop","draggedRange","onDragEnd","onKeyDown","nativeEvent","isRTL","Hotkeys","maybeHistoryEditor","reverse","currentNode","isPlainTextOnlyPaste","isElement","nodeType","canOverflow","overflow","skipOverflowHiddenElements","isScrollable","clientHeight","scrollHeight","clientWidth","scrollWidth","overflowY","overflowX","frame","ownerDocument","defaultView","frameElement","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","windowWithViewport","block","inline","checkBoundary","TypeError","scrollingElement","documentElement","frames","cursor","parentElement","push","body","viewportWidth","visualViewport","innerWidth","viewportHeight","innerHeight","viewportX","scrollX","pageXOffset","viewportY","scrollY","pageYOffset","getBoundingClientRect","targetHeight","targetWidth","targetTop","top","targetRight","targetBottom","bottom","targetLeft","targetBlock","targetInline","computations","frameStyle","borderLeft","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","scrollbarWidth","offsetWidth","scrollbarHeight","offsetHeight","max","scrollLeft","scrollTop","min","isObject","require","now","toNumber","nativeMax","nativeMin","module","exports","func","wait","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","args","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","timeWaiting","remainingWait","debounced","isInvoking","arguments","cancel","IS_MAC","platform","MODIFIERS","alt","control","meta","shift","ALIASES","add","break","cmd","command","ctl","ctrl","del","down","esc","ins","mod","opt","option","return","space","spacebar","up","win","CODES","backspace","tab","enter","pause","capslock","escape","pageup","pagedown","home","arrowleft","arrowup","arrowright","arrowdown","insert","delete","numlock","scrolllock","f","isHotkey","hotkey","isArray","array","map","parseHotkey","check","some","object","compareHotkey","byKey","ret","values","replace","k","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","done","optional","endsWith","slice","name","toKeyName","modifier","which","toKeyCode","expected","actual","toLowerCase","toUpperCase","charCodeAt","default","isCodeHotkey","Date","isOptionsObject","isTargetAttached","isConnected","contains","behavior","compute","computeOptions","getOptions","actions","canSmoothScroll","forEach","_ref","scroll","defaultBehavior","rtl","ltr","RTL","LTR","RegExp","debounce"],"mappings":"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","file":"static/js/12.ba417026.chunk.js","sourcesContent":["var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n\n  if (isProduction) {\n    throw new Error(prefix);\n  } else {\n    throw new Error(prefix + \": \" + (message || ''));\n  }\n}\n\nexport default invariant;\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react'\nimport { Editor, Text, Path, Element, Node } from 'slate'\n\nimport { ReactEditor, useSlateStatic } from '..'\n\n/**\n * Leaf content strings.\n */\n\nconst String = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  text: Text\n}) => {\n  const { isLast, leaf, parent, text } = props\n  const editor = useSlateStatic()\n  const path = ReactEditor.findPath(editor, text)\n  const parentPath = Path.parent(path)\n\n  // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n  if (editor.isVoid(parent)) {\n    return <ZeroWidthString length={Node.string(parent).length} />\n  }\n\n  // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n  if (\n    leaf.text === '' &&\n    parent.children[parent.children.length - 1] === text &&\n    !editor.isInline(parent) &&\n    Editor.string(editor, parentPath) === ''\n  ) {\n    return <ZeroWidthString isLineBreak />\n  }\n\n  // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n  if (leaf.text === '') {\n    return <ZeroWidthString />\n  }\n\n  // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return <TextString isTrailing text={leaf.text} />\n  }\n\n  return <TextString text={leaf.text} />\n}\n\n/**\n * Leaf strings with text in them.\n */\n\nconst TextString = (props: { text: string; isTrailing?: boolean }) => {\n  const { text, isTrailing = false } = props\n  return (\n    <span data-slate-string>\n      {text}\n      {isTrailing ? '\\n' : null}\n    </span>\n  )\n}\n\n/**\n * Leaf strings without text, render as zero-width strings.\n */\n\nconst ZeroWidthString = (props: { length?: number; isLineBreak?: boolean }) => {\n  const { length = 0, isLineBreak = false } = props\n  return (\n    <span\n      data-slate-zero-width={isLineBreak ? 'n' : 'z'}\n      data-slate-length={length}\n    >\n      {'\\uFEFF'}\n      {isLineBreak ? <br /> : null}\n    </span>\n  )\n}\n\nexport default String\n","import { Node, Ancestor, Editor, Range } from 'slate'\n\nimport { Key } from './key'\n\n/**\n * Two weak maps that allow us rebuild a path given a node. They are populated\n * at render time such that after a render occurs we can always backtrack.\n */\n\nexport const NODE_TO_INDEX: WeakMap<Node, number> = new WeakMap()\nexport const NODE_TO_PARENT: WeakMap<Node, Ancestor> = new WeakMap()\n\n/**\n * Weak maps that allow us to go between Slate nodes and DOM nodes. These\n * are used to resolve DOM event-related logic into Slate actions.\n */\nexport const EDITOR_TO_WINDOW: WeakMap<Editor, Window> = new WeakMap()\nexport const EDITOR_TO_ELEMENT: WeakMap<Editor, HTMLElement> = new WeakMap()\nexport const EDITOR_TO_PLACEHOLDER: WeakMap<Editor, string> = new WeakMap()\nexport const ELEMENT_TO_NODE: WeakMap<HTMLElement, Node> = new WeakMap()\nexport const KEY_TO_ELEMENT: WeakMap<Key, HTMLElement> = new WeakMap()\nexport const NODE_TO_ELEMENT: WeakMap<Node, HTMLElement> = new WeakMap()\nexport const NODE_TO_KEY: WeakMap<Node, Key> = new WeakMap()\n\n/**\n * Weak maps for storing editor-related state.\n */\n\nexport const IS_READ_ONLY: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_FOCUSED: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_CLICKING: WeakMap<Editor, boolean> = new WeakMap()\n\n/**\n * Weak map for associating the context `onChange` context with the plugin.\n */\n\nexport const EDITOR_TO_ON_CHANGE = new WeakMap<Editor, () => void>()\n\nexport const EDITOR_TO_RESTORE_DOM = new WeakMap<Editor, () => void>()\n\n/**\n * Symbols.\n */\n\nexport const PLACEHOLDER_SYMBOL = (Symbol('placeholder') as unknown) as string\n","import React, { useRef, useEffect } from 'react'\nimport { Element, Text } from 'slate'\nimport String from './string'\nimport { PLACEHOLDER_SYMBOL } from '../utils/weak-maps'\nimport { RenderLeafProps, RenderPlaceholderProps } from './editable'\n\n// auto-incrementing key for String component, force it refresh to\n// prevent inconsistent rendering by React with IME input\nlet keyForString = 0\n/**\n * Individual leaves in a text node with unique formatting.\n */\n\nconst Leaf = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: Text\n}) => {\n  const {\n    leaf,\n    isLast,\n    text,\n    parent,\n    renderPlaceholder,\n    renderLeaf = (props: RenderLeafProps) => <DefaultLeaf {...props} />,\n  } = props\n\n  const placeholderRef = useRef<HTMLSpanElement | null>(null)\n\n  useEffect(() => {\n    const placeholderEl = placeholderRef?.current\n    const editorEl = document.querySelector<HTMLDivElement>(\n      '[data-slate-editor=\"true\"]'\n    )\n\n    if (!placeholderEl || !editorEl) {\n      return\n    }\n\n    editorEl.style.minHeight = `${placeholderEl.clientHeight}px`\n\n    return () => {\n      editorEl.style.minHeight = 'auto'\n    }\n  }, [placeholderRef, leaf])\n\n  let children = (\n    <String\n      key={keyForString++}\n      isLast={isLast}\n      leaf={leaf}\n      parent={parent}\n      text={text}\n    />\n  )\n\n  if (leaf[PLACEHOLDER_SYMBOL]) {\n    const placeholderProps: RenderPlaceholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none',\n        },\n        contentEditable: false,\n        ref: placeholderRef,\n      },\n    }\n\n    children = (\n      <React.Fragment>\n        {renderPlaceholder(placeholderProps)}\n        {children}\n      </React.Fragment>\n    )\n  }\n\n  // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n  const attributes: {\n    'data-slate-leaf': true\n  } = {\n    'data-slate-leaf': true,\n  }\n\n  return renderLeaf({ attributes, children, leaf, text })\n}\n\nconst MemoizedLeaf = React.memo(Leaf, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.renderPlaceholder === prev.renderPlaceholder &&\n    next.text === prev.text &&\n    Text.equals(next.leaf, prev.leaf) &&\n    next.leaf[PLACEHOLDER_SYMBOL] === prev.leaf[PLACEHOLDER_SYMBOL]\n  )\n})\n\nexport const DefaultLeaf = (props: RenderLeafProps) => {\n  const { attributes, children } = props\n  return <span {...attributes}>{children}</span>\n}\n\nexport default MemoizedLeaf\n","export const IS_IOS =\n  typeof navigator !== 'undefined' &&\n  typeof window !== 'undefined' &&\n  /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n  !window.MSStream\n\nexport const IS_APPLE =\n  typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent)\n\nexport const IS_ANDROID =\n  typeof navigator !== 'undefined' && /Android/.test(navigator.userAgent)\n\nexport const IS_FIREFOX =\n  typeof navigator !== 'undefined' &&\n  /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent)\n\nexport const IS_SAFARI =\n  typeof navigator !== 'undefined' &&\n  /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent)\n\n// \"modern\" Edge was released at 79.x\nexport const IS_EDGE_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /Edge?\\/(?:[0-6][0-9]|[0-7][0-8])/i.test(navigator.userAgent)\n\nexport const IS_CHROME =\n  typeof navigator !== 'undefined' && /Chrome/i.test(navigator.userAgent)\n\n// Native `beforeInput` events don't work well with react on Chrome 75\n// and older, Chrome 76+ can use `beforeInput` though.\nexport const IS_CHROME_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /Chrome?\\/(?:[0-7][0-5]|[0-6][0-9])/i.test(navigator.userAgent)\n\n// Firefox did not support `beforeInput` until `v87`.\nexport const IS_FIREFOX_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /^(?!.*Seamonkey)(?=.*Firefox\\/(?:[0-7][0-9]|[0-8][0-6])).*/i.test(\n    navigator.userAgent\n  )\n\n// Check if DOM is available as React does internally.\n// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\nexport const CAN_USE_DOM = !!(\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n)\n\n// COMPAT: Firefox/Edge Legacy don't support the `beforeinput` event\n// Chrome Legacy doesn't support `beforeinput` correctly\nexport const HAS_BEFORE_INPUT_SUPPORT =\n  !IS_CHROME_LEGACY &&\n  !IS_EDGE_LEGACY &&\n  // globalThis is undefined in older browsers\n  typeof globalThis !== 'undefined' &&\n  globalThis.InputEvent &&\n  // @ts-ignore The `getTargetRanges` property isn't recognized.\n  typeof globalThis.InputEvent.prototype.getTargetRanges === 'function'\n","import { useLayoutEffect, useEffect } from 'react'\nimport { CAN_USE_DOM } from '../utils/environment'\n\n/**\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\n */\n\nexport const useIsomorphicLayoutEffect = CAN_USE_DOM\n  ? useLayoutEffect\n  : useEffect\n","import { Range } from 'slate'\nimport { PLACEHOLDER_SYMBOL } from './weak-maps'\n\nexport const shallowCompare = (obj1: {}, obj2: {}) =>\n  Object.keys(obj1).length === Object.keys(obj2).length &&\n  Object.keys(obj1).every(\n    key => obj2.hasOwnProperty(key) && obj1[key] === obj2[key]\n  )\n\n/**\n * Check if a list of decorator ranges are equal to another.\n *\n * PERF: this requires the two lists to also have the ranges inside them in the\n * same order, but this is an okay constraint for us since decorations are\n * kept in order, and the odd case where they aren't is okay to re-render for.\n */\n\nexport const isDecoratorRangeListEqual = (\n  list: Range[],\n  another: Range[]\n): boolean => {\n  if (list.length !== another.length) {\n    return false\n  }\n\n  for (let i = 0; i < list.length; i++) {\n    const range = list[i]\n    const other = another[i]\n\n    const { anchor: rangeAnchor, focus: rangeFocus, ...rangeOwnProps } = range\n    const { anchor: otherAnchor, focus: otherFocus, ...otherOwnProps } = other\n\n    if (\n      !Range.equals(range, other) ||\n      range[PLACEHOLDER_SYMBOL] !== other[PLACEHOLDER_SYMBOL] ||\n      !shallowCompare(rangeOwnProps, otherOwnProps)\n    ) {\n      return false\n    }\n  }\n\n  return true\n}\n","import React, { useRef } from 'react'\nimport { Range, Element, Text as SlateText } from 'slate'\n\nimport Leaf from './leaf'\nimport { ReactEditor, useSlateStatic } from '..'\nimport { RenderLeafProps, RenderPlaceholderProps } from './editable'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  KEY_TO_ELEMENT,\n  NODE_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n} from '../utils/weak-maps'\nimport { isDecoratorRangeListEqual } from '../utils/range-list'\n\n/**\n * Text.\n */\n\nconst Text = (props: {\n  decorations: Range[]\n  isLast: boolean\n  parent: Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: SlateText\n}) => {\n  const {\n    decorations,\n    isLast,\n    parent,\n    renderPlaceholder,\n    renderLeaf,\n    text,\n  } = props\n  const editor = useSlateStatic()\n  const ref = useRef<HTMLSpanElement>(null)\n  const leaves = SlateText.decorations(text, decorations)\n  const key = ReactEditor.findKey(editor, text)\n  const children = []\n\n  for (let i = 0; i < leaves.length; i++) {\n    const leaf = leaves[i]\n\n    children.push(\n      <Leaf\n        isLast={isLast && i === leaves.length - 1}\n        key={`${key.id}-${i}`}\n        renderPlaceholder={renderPlaceholder}\n        leaf={leaf}\n        text={text}\n        parent={parent}\n        renderLeaf={renderLeaf}\n      />\n    )\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      KEY_TO_ELEMENT.set(key, ref.current)\n      NODE_TO_ELEMENT.set(text, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, text)\n    } else {\n      KEY_TO_ELEMENT.delete(key)\n      NODE_TO_ELEMENT.delete(text)\n    }\n  })\n\n  return (\n    <span data-slate-node=\"text\" ref={ref}>\n      {children}\n    </span>\n  )\n}\n\nconst MemoizedText = React.memo(Text, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.text === prev.text &&\n    isDecoratorRangeListEqual(next.decorations, prev.decorations)\n  )\n})\n\nexport default MemoizedText\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `selected` state of an element.\n */\n\nexport const SelectedContext = createContext(false)\n\n/**\n * Get the current `selected` state of an element.\n */\n\nexport const useSelected = (): boolean => {\n  return useContext(SelectedContext)\n}\n","import React, { useRef } from 'react'\nimport getDirection from 'direction'\nimport { Editor, Node, Range, NodeEntry, Element as SlateElement } from 'slate'\n\nimport Text from './text'\nimport useChildren from '../hooks/use-children'\nimport { ReactEditor, useSlateStatic, useReadOnly } from '..'\nimport { SelectedContext } from '../hooks/use-selected'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  NODE_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  NODE_TO_PARENT,\n  NODE_TO_INDEX,\n  KEY_TO_ELEMENT,\n} from '../utils/weak-maps'\nimport { isDecoratorRangeListEqual } from '../utils/range-list'\nimport {\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n} from './editable'\n\n/**\n * Element.\n */\n\nconst Element = (props: {\n  decorations: Range[]\n  element: SlateElement\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorations,\n    element,\n    renderElement = (p: RenderElementProps) => <DefaultElement {...p} />,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  } = props\n  const ref = useRef<HTMLElement>(null)\n  const editor = useSlateStatic()\n  const readOnly = useReadOnly()\n  const isInline = editor.isInline(element)\n  const key = ReactEditor.findKey(editor, element)\n  let children: React.ReactNode = useChildren({\n    decorations,\n    node: element,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  })\n\n  // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n  const attributes: {\n    'data-slate-node': 'element'\n    'data-slate-void'?: true\n    'data-slate-inline'?: true\n    contentEditable?: false\n    dir?: 'rtl'\n    ref: any\n  } = {\n    'data-slate-node': 'element',\n    ref,\n  }\n\n  if (isInline) {\n    attributes['data-slate-inline'] = true\n  }\n\n  // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    const text = Node.string(element)\n    const dir = getDirection(text)\n\n    if (dir === 'rtl') {\n      attributes.dir = dir\n    }\n  }\n\n  // If it's a void node, wrap the children in extra void-specific elements.\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true\n\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false\n    }\n\n    const Tag = isInline ? 'span' : 'div'\n    const [[text]] = Node.texts(element)\n\n    children = readOnly ? null : (\n      <Tag\n        data-slate-spacer\n        style={{\n          height: '0',\n          color: 'transparent',\n          outline: 'none',\n          position: 'absolute',\n        }}\n      >\n        <Text\n          renderPlaceholder={renderPlaceholder}\n          decorations={[]}\n          isLast={false}\n          parent={element}\n          text={text}\n        />\n      </Tag>\n    )\n\n    NODE_TO_INDEX.set(text, 0)\n    NODE_TO_PARENT.set(text, element)\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      KEY_TO_ELEMENT.set(key, ref.current)\n      NODE_TO_ELEMENT.set(element, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, element)\n    } else {\n      KEY_TO_ELEMENT.delete(key)\n      NODE_TO_ELEMENT.delete(element)\n    }\n  })\n\n  return (\n    <SelectedContext.Provider value={!!selection}>\n      {renderElement({ attributes, children, element })}\n    </SelectedContext.Provider>\n  )\n}\n\nconst MemoizedElement = React.memo(Element, (prev, next) => {\n  return (\n    prev.element === next.element &&\n    prev.renderElement === next.renderElement &&\n    prev.renderLeaf === next.renderLeaf &&\n    isDecoratorRangeListEqual(prev.decorations, next.decorations) &&\n    (prev.selection === next.selection ||\n      (!!prev.selection &&\n        !!next.selection &&\n        Range.equals(prev.selection, next.selection)))\n  )\n})\n\n/**\n * The default element renderer.\n */\n\nexport const DefaultElement = (props: RenderElementProps) => {\n  const { attributes, children, element } = props\n  const editor = useSlateStatic()\n  const Tag = editor.isInline(element) ? 'span' : 'div'\n  return (\n    <Tag {...attributes} style={{ position: 'relative' }}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default MemoizedElement\n","import { createContext, useContext } from 'react'\nimport { ReactEditor } from '../plugin/react-editor'\nimport { Editor } from 'slate'\n\n/**\n * A React context for sharing the editor object.\n */\n\nexport const EditorContext = createContext<ReactEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useSlateStatic = (): Editor => {\n  const editor = useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`useSlateStatic\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  return editor\n}\n","import { createContext, useContext } from 'react'\nimport { Range, NodeEntry } from 'slate'\n\n/**\n * A React context for sharing the `decorate` prop of the editable.\n */\n\nexport const DecorateContext = createContext<(entry: NodeEntry) => Range[]>(\n  () => []\n)\n\n/**\n * Get the current `decorate` prop of the editable.\n */\n\nexport const useDecorate = (): ((entry: NodeEntry) => Range[]) => {\n  return useContext(DecorateContext)\n}\n","import React from 'react'\nimport { Editor, Range, Element, NodeEntry, Ancestor, Descendant } from 'slate'\n\nimport ElementComponent from '../components/element'\nimport TextComponent from '../components/text'\nimport { ReactEditor } from '..'\nimport { useSlateStatic } from './use-slate-static'\nimport { useDecorate } from './use-decorate'\nimport { NODE_TO_INDEX, NODE_TO_PARENT } from '../utils/weak-maps'\nimport {\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n} from '../components/editable'\n\n/**\n * Children.\n */\n\nconst useChildren = (props: {\n  decorations: Range[]\n  node: Ancestor\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorations,\n    node,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  } = props\n  const decorate = useDecorate()\n  const editor = useSlateStatic()\n  const path = ReactEditor.findPath(editor, node)\n  const children = []\n  const isLeafBlock =\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    Editor.hasInlines(editor, node)\n\n  for (let i = 0; i < node.children.length; i++) {\n    const p = path.concat(i)\n    const n = node.children[i] as Descendant\n    const key = ReactEditor.findKey(editor, n)\n    const range = Editor.range(editor, p)\n    const sel = selection && Range.intersection(range, selection)\n    const ds = decorate([n, p])\n\n    for (const dec of decorations) {\n      const d = Range.intersection(dec, range)\n\n      if (d) {\n        ds.push(d)\n      }\n    }\n\n    if (Element.isElement(n)) {\n      children.push(\n        <ElementComponent\n          decorations={ds}\n          element={n}\n          key={key.id}\n          renderElement={renderElement}\n          renderPlaceholder={renderPlaceholder}\n          renderLeaf={renderLeaf}\n          selection={sel}\n        />\n      )\n    } else {\n      children.push(\n        <TextComponent\n          decorations={ds}\n          key={key.id}\n          isLast={isLeafBlock && i === node.children.length - 1}\n          parent={node}\n          renderPlaceholder={renderPlaceholder}\n          renderLeaf={renderLeaf}\n          text={n}\n        />\n      )\n    }\n\n    NODE_TO_INDEX.set(n, i)\n    NODE_TO_PARENT.set(n, node)\n  }\n\n  return children\n}\n\nexport default useChildren\n","import { isKeyHotkey } from 'is-hotkey'\nimport { IS_APPLE } from './environment'\n\n/**\n * Hotkey mappings for each platform.\n */\n\nconst HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  italic: 'mod+i',\n  splitBlock: 'shift?+enter',\n  undo: 'mod+z',\n}\n\nconst APPLE_HOTKEYS = {\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t',\n}\n\nconst WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z'],\n}\n\n/**\n * Create a platform-aware hotkey checker.\n */\n\nconst create = (key: string) => {\n  const generic = HOTKEYS[key]\n  const apple = APPLE_HOTKEYS[key]\n  const windows = WINDOWS_HOTKEYS[key]\n  const isGeneric = generic && isKeyHotkey(generic)\n  const isApple = apple && isKeyHotkey(apple)\n  const isWindows = windows && isKeyHotkey(windows)\n\n  return (event: KeyboardEvent) => {\n    if (isGeneric && isGeneric(event)) return true\n    if (IS_APPLE && isApple && isApple(event)) return true\n    if (!IS_APPLE && isWindows && isWindows(event)) return true\n    return false\n  }\n}\n\n/**\n * Hotkeys.\n */\n\nexport default {\n  isBold: create('bold'),\n  isCompose: create('compose'),\n  isMoveBackward: create('moveBackward'),\n  isMoveForward: create('moveForward'),\n  isDeleteBackward: create('deleteBackward'),\n  isDeleteForward: create('deleteForward'),\n  isDeleteLineBackward: create('deleteLineBackward'),\n  isDeleteLineForward: create('deleteLineForward'),\n  isDeleteWordBackward: create('deleteWordBackward'),\n  isDeleteWordForward: create('deleteWordForward'),\n  isExtendBackward: create('extendBackward'),\n  isExtendForward: create('extendForward'),\n  isExtendLineBackward: create('extendLineBackward'),\n  isExtendLineForward: create('extendLineForward'),\n  isItalic: create('italic'),\n  isMoveLineBackward: create('moveLineBackward'),\n  isMoveLineForward: create('moveLineForward'),\n  isMoveWordBackward: create('moveWordBackward'),\n  isMoveWordForward: create('moveWordForward'),\n  isRedo: create('redo'),\n  isSplitBlock: create('splitBlock'),\n  isTransposeCharacter: create('transposeCharacter'),\n  isUndo: create('undo'),\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */\n\nexport const ReadOnlyContext = createContext(false)\n\n/**\n * Get the current `readOnly` state of the editor.\n */\n\nexport const useReadOnly = (): boolean => {\n  return useContext(ReadOnlyContext)\n}\n","import { createContext, useContext } from 'react'\nimport { Editor } from 'slate'\nimport { ReactEditor } from '../plugin/react-editor'\n\n/**\n * A React context for sharing the editor object, in a way that re-renders the\n * context whenever changes occur.\n */\n\nexport const SlateContext = createContext<[ReactEditor] | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useSlate = (): Editor => {\n  const context = useContext(SlateContext)\n\n  if (!context) {\n    throw new Error(\n      `The \\`useSlate\\` hook must be used inside the <SlateProvider> component's context.`\n    )\n  }\n\n  const [editor] = context\n  return editor\n}\n","/**\n * Types.\n */\n\n// COMPAT: This is required to prevent TypeScript aliases from doing some very\n// weird things for Slate's types with the same name as globals. (2019/11/27)\n// https://github.com/microsoft/TypeScript/issues/35002\nimport DOMNode = globalThis.Node\nimport DOMComment = globalThis.Comment\nimport DOMElement = globalThis.Element\nimport DOMText = globalThis.Text\nimport DOMRange = globalThis.Range\nimport DOMSelection = globalThis.Selection\nimport DOMStaticRange = globalThis.StaticRange\n\nexport {\n  DOMNode,\n  DOMComment,\n  DOMElement,\n  DOMText,\n  DOMRange,\n  DOMSelection,\n  DOMStaticRange,\n}\n\ndeclare global {\n  interface Window {\n    Selection: typeof Selection['constructor']\n    DataTransfer: typeof DataTransfer['constructor']\n    Node: typeof Node['constructor']\n  }\n}\n\nexport type DOMPoint = [Node, number]\n\n/**\n * Returns the host window of a DOM node\n */\n\nexport const getDefaultView = (value: any): Window | null => {\n  return (\n    (value && value.ownerDocument && value.ownerDocument.defaultView) || null\n  )\n}\n\n/**\n * Check if a DOM node is a comment node.\n */\n\nexport const isDOMComment = (value: any): value is DOMComment => {\n  return isDOMNode(value) && value.nodeType === 8\n}\n\n/**\n * Check if a DOM node is an element node.\n */\n\nexport const isDOMElement = (value: any): value is DOMElement => {\n  return isDOMNode(value) && value.nodeType === 1\n}\n\n/**\n * Check if a value is a DOM node.\n */\n\nexport const isDOMNode = (value: any): value is DOMNode => {\n  const window = getDefaultView(value)\n  return !!window && value instanceof window.Node\n}\n\n/**\n * Check if a value is a DOM selection.\n */\n\nexport const isDOMSelection = (value: any): value is DOMSelection => {\n  const window = value && value.anchorNode && getDefaultView(value.anchorNode)\n  return !!window && value instanceof window.Selection\n}\n\n/**\n * Check if a DOM node is an element node.\n */\n\nexport const isDOMText = (value: any): value is DOMText => {\n  return isDOMNode(value) && value.nodeType === 3\n}\n\n/**\n * Checks whether a paste event is a plaintext-only event.\n */\n\nexport const isPlainTextOnlyPaste = (event: ClipboardEvent) => {\n  return (\n    event.clipboardData &&\n    event.clipboardData.getData('text/plain') !== '' &&\n    event.clipboardData.types.length === 1\n  )\n}\n\n/**\n * Normalize a DOM point so that it always refers to a text node.\n */\n\nexport const normalizeDOMPoint = (domPoint: DOMPoint): DOMPoint => {\n  let [node, offset] = domPoint\n\n  // If it's an element node, its offset refers to the index of its children\n  // including comment nodes, so try to find the right text child node.\n  if (isDOMElement(node) && node.childNodes.length) {\n    let isLast = offset === node.childNodes.length\n    let index = isLast ? offset - 1 : offset\n    ;[node, index] = getEditableChildAndIndex(\n      node,\n      index,\n      isLast ? 'backward' : 'forward'\n    )\n    // If the editable child found is in front of input offset, we instead seek to its end\n    isLast = index < offset\n\n    // If the node has children, traverse until we have a leaf node. Leaf nodes\n    // can be either text nodes, or other void DOM nodes.\n    while (isDOMElement(node) && node.childNodes.length) {\n      const i = isLast ? node.childNodes.length - 1 : 0\n      node = getEditableChild(node, i, isLast ? 'backward' : 'forward')\n    }\n\n    // Determine the new offset inside the text node.\n    offset = isLast && node.textContent != null ? node.textContent.length : 0\n  }\n\n  // Return the node and offset.\n  return [node, offset]\n}\n\n/**\n * Determines wether the active element is nested within a shadowRoot\n */\n\nexport const hasShadowRoot = () => {\n  return !!(\n    window.document.activeElement && window.document.activeElement.shadowRoot\n  )\n}\n\n/**\n * Get the nearest editable child and index at `index` in a `parent`, preferring\n * `direction`.\n */\n\nexport const getEditableChildAndIndex = (\n  parent: DOMElement,\n  index: number,\n  direction: 'forward' | 'backward'\n): [DOMNode, number] => {\n  const { childNodes } = parent\n  let child = childNodes[index]\n  let i = index\n  let triedForward = false\n  let triedBackward = false\n\n  // While the child is a comment node, or an element node with no children,\n  // keep iterating to find a sibling non-void, non-comment node.\n  while (\n    isDOMComment(child) ||\n    (isDOMElement(child) && child.childNodes.length === 0) ||\n    (isDOMElement(child) && child.getAttribute('contenteditable') === 'false')\n  ) {\n    if (triedForward && triedBackward) {\n      break\n    }\n\n    if (i >= childNodes.length) {\n      triedForward = true\n      i = index - 1\n      direction = 'backward'\n      continue\n    }\n\n    if (i < 0) {\n      triedBackward = true\n      i = index + 1\n      direction = 'forward'\n      continue\n    }\n\n    child = childNodes[i]\n    index = i\n    i += direction === 'forward' ? 1 : -1\n  }\n\n  return [child, index]\n}\n\n/**\n * Get the nearest editable child at `index` in a `parent`, preferring\n * `direction`.\n */\n\nexport const getEditableChild = (\n  parent: DOMElement,\n  index: number,\n  direction: 'forward' | 'backward'\n): DOMNode => {\n  const [child] = getEditableChildAndIndex(parent, index, direction)\n  return child\n}\n\n/**\n * Get a plaintext representation of the content of a node, accounting for block\n * elements which get a newline appended.\n *\n * The domNode must be attached to the DOM.\n */\n\nexport const getPlainText = (domNode: DOMNode) => {\n  let text = ''\n\n  if (isDOMText(domNode) && domNode.nodeValue) {\n    return domNode.nodeValue\n  }\n\n  if (isDOMElement(domNode)) {\n    for (const childNode of Array.from(domNode.childNodes)) {\n      text += getPlainText(childNode)\n    }\n\n    const display = getComputedStyle(domNode).getPropertyValue('display')\n\n    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {\n      text += '\\n'\n    }\n  }\n\n  return text\n}\n","import React, { useEffect, useRef, useMemo, useCallback, useState } from 'react'\nimport {\n  Editor,\n  Element,\n  NodeEntry,\n  Node,\n  Range,\n  Text,\n  Transforms,\n  Path,\n} from 'slate'\nimport getDirection from 'direction'\nimport throttle from 'lodash/throttle'\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nimport useChildren from '../hooks/use-children'\nimport Hotkeys from '../utils/hotkeys'\nimport {\n  HAS_BEFORE_INPUT_SUPPORT,\n  IS_IOS,\n  IS_CHROME,\n  IS_FIREFOX,\n  IS_FIREFOX_LEGACY,\n  IS_SAFARI,\n} from '../utils/environment'\nimport { ReactEditor } from '..'\nimport { ReadOnlyContext } from '../hooks/use-read-only'\nimport { useSlate } from '../hooks/use-slate'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport { DecorateContext } from '../hooks/use-decorate'\nimport {\n  DOMElement,\n  DOMNode,\n  DOMRange,\n  getDefaultView,\n  isDOMElement,\n  isDOMNode,\n  isPlainTextOnlyPaste,\n} from '../utils/dom'\n\nimport {\n  EDITOR_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  IS_READ_ONLY,\n  NODE_TO_ELEMENT,\n  IS_FOCUSED,\n  PLACEHOLDER_SYMBOL,\n  EDITOR_TO_WINDOW,\n} from '../utils/weak-maps'\n\nconst Children = (props: Parameters<typeof useChildren>[0]) => (\n  <React.Fragment>{useChildren(props)}</React.Fragment>\n)\n\n/**\n * `RenderElementProps` are passed to the `renderElement` handler.\n */\n\nexport interface RenderElementProps {\n  children: any\n  element: Element\n  attributes: {\n    'data-slate-node': 'element'\n    'data-slate-inline'?: true\n    'data-slate-void'?: true\n    dir?: 'rtl'\n    ref: any\n  }\n}\n\n/**\n * `RenderLeafProps` are passed to the `renderLeaf` handler.\n */\n\nexport interface RenderLeafProps {\n  children: any\n  leaf: Text\n  text: Text\n  attributes: {\n    'data-slate-leaf': true\n  }\n}\n\n/**\n * `EditableProps` are passed to the `<Editable>` component.\n */\n\nexport type EditableProps = {\n  decorate?: (entry: NodeEntry) => Range[]\n  onDOMBeforeInput?: (event: InputEvent) => void\n  placeholder?: string\n  readOnly?: boolean\n  role?: string\n  style?: React.CSSProperties\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  renderPlaceholder?: (props: RenderPlaceholderProps) => JSX.Element\n  scrollSelectionIntoView?: (editor: ReactEditor, domRange: DOMRange) => void\n  as?: React.ElementType\n} & React.TextareaHTMLAttributes<HTMLDivElement>\n\n/**\n * Editable.\n */\n\nexport const Editable = (props: EditableProps) => {\n  const {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    renderPlaceholder = props => <DefaultPlaceholder {...props} />,\n    scrollSelectionIntoView = defaultScrollSelectionIntoView,\n    style = {},\n    as: Component = 'div',\n    ...attributes\n  } = props\n  const editor = useSlate()\n  // Rerender editor when composition status changed\n  const [isComposing, setIsComposing] = useState(false)\n  const ref = useRef<HTMLDivElement>(null)\n\n  // Update internal state on each render.\n  IS_READ_ONLY.set(editor, readOnly)\n\n  // Keep track of some state for the event handler logic.\n  const state = useMemo(\n    () => ({\n      isComposing: false,\n      isDraggingInternally: false,\n      isUpdatingSelection: false,\n      latestElement: null as DOMElement | null,\n    }),\n    []\n  )\n\n  // Whenever the editor updates...\n  useIsomorphicLayoutEffect(() => {\n    // Update element-related weak maps with the DOM element ref.\n    let window\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window)\n      EDITOR_TO_ELEMENT.set(editor, ref.current)\n      NODE_TO_ELEMENT.set(editor, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, editor)\n    } else {\n      NODE_TO_ELEMENT.delete(editor)\n    }\n\n    // Make sure the DOM selection state is in sync.\n    const { selection } = editor\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    const domSelection = root.getSelection()\n\n    if (state.isComposing || !domSelection || !ReactEditor.isFocused(editor)) {\n      return\n    }\n\n    const hasDomSelection = domSelection.type !== 'None'\n\n    // If the DOM selection is properly unset, we're done.\n    if (!selection && !hasDomSelection) {\n      return\n    }\n\n    // verify that the dom selection is in the editor\n    const editorElement = EDITOR_TO_ELEMENT.get(editor)!\n    let hasDomSelectionInEditor = false\n    if (\n      editorElement.contains(domSelection.anchorNode) &&\n      editorElement.contains(domSelection.focusNode)\n    ) {\n      hasDomSelectionInEditor = true\n    }\n\n    // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n    if (hasDomSelection && hasDomSelectionInEditor && selection) {\n      const slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: true,\n      })\n      if (slateRange && Range.equals(slateRange, selection)) {\n        return\n      }\n    }\n\n    // when <Editable/> is being controlled through external value\n    // then its children might just change - DOM responds to it on its own\n    // but Slate's value is not being updated through any operation\n    // and thus it doesn't transform selection on its own\n    if (selection && !ReactEditor.hasRange(editor, selection)) {\n      editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false,\n      })\n      return\n    }\n\n    // Otherwise the DOM selection is out of sync, so update it.\n    state.isUpdatingSelection = true\n\n    const newDomRange = selection && ReactEditor.toDOMRange(editor, selection)\n\n    if (newDomRange) {\n      if (Range.isBackward(selection!)) {\n        domSelection.setBaseAndExtent(\n          newDomRange.endContainer,\n          newDomRange.endOffset,\n          newDomRange.startContainer,\n          newDomRange.startOffset\n        )\n      } else {\n        domSelection.setBaseAndExtent(\n          newDomRange.startContainer,\n          newDomRange.startOffset,\n          newDomRange.endContainer,\n          newDomRange.endOffset\n        )\n      }\n      scrollSelectionIntoView(editor, newDomRange)\n    } else {\n      domSelection.removeAllRanges()\n    }\n\n    setTimeout(() => {\n      // COMPAT: In Firefox, it's not enough to create a range, you also need\n      // to focus the contenteditable element too. (2016/11/16)\n      if (newDomRange && IS_FIREFOX) {\n        const el = ReactEditor.toDOMNode(editor, editor)\n        el.focus()\n      }\n\n      state.isUpdatingSelection = false\n    })\n  })\n\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus()\n    }\n  }, [autoFocus])\n\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  const onDOMBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (\n        !readOnly &&\n        hasEditableTarget(editor, event.target) &&\n        !isDOMEventHandled(event, propsOnDOMBeforeInput)\n      ) {\n        const { selection } = editor\n        const { inputType: type } = event\n        const data = (event as any).dataTransfer || event.data || undefined\n\n        // These two types occur while a user is composing text and can't be\n        // cancelled. Let them through and wait for the composition to end.\n        if (\n          type === 'insertCompositionText' ||\n          type === 'deleteCompositionText'\n        ) {\n          return\n        }\n\n        event.preventDefault()\n\n        // COMPAT: For the deleting forward/backward input types we don't want\n        // to change the selection because it is the range that will be deleted,\n        // and those commands determine that for themselves.\n        if (!type.startsWith('delete') || type.startsWith('deleteBy')) {\n          const [targetRange] = (event as any).getTargetRanges()\n\n          if (targetRange) {\n            const range = ReactEditor.toSlateRange(editor, targetRange, {\n              exactMatch: false,\n            })\n\n            if (!selection || !Range.equals(selection, range)) {\n              Transforms.select(editor, range)\n            }\n          }\n        }\n\n        // COMPAT: If the selection is expanded, even if the command seems like\n        // a delete forward/backward command it should delete the selection.\n        if (\n          selection &&\n          Range.isExpanded(selection) &&\n          type.startsWith('delete')\n        ) {\n          const direction = type.endsWith('Backward') ? 'backward' : 'forward'\n          Editor.deleteFragment(editor, { direction })\n          return\n        }\n\n        switch (type) {\n          case 'deleteByComposition':\n          case 'deleteByCut':\n          case 'deleteByDrag': {\n            Editor.deleteFragment(editor)\n            break\n          }\n\n          case 'deleteContent':\n          case 'deleteContentForward': {\n            Editor.deleteForward(editor)\n            break\n          }\n\n          case 'deleteContentBackward': {\n            Editor.deleteBackward(editor)\n            break\n          }\n\n          case 'deleteEntireSoftLine': {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            Editor.deleteForward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteHardLineBackward': {\n            Editor.deleteBackward(editor, { unit: 'block' })\n            break\n          }\n\n          case 'deleteSoftLineBackward': {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteHardLineForward': {\n            Editor.deleteForward(editor, { unit: 'block' })\n            break\n          }\n\n          case 'deleteSoftLineForward': {\n            Editor.deleteForward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteWordBackward': {\n            Editor.deleteBackward(editor, { unit: 'word' })\n            break\n          }\n\n          case 'deleteWordForward': {\n            Editor.deleteForward(editor, { unit: 'word' })\n            break\n          }\n\n          case 'insertLineBreak':\n          case 'insertParagraph': {\n            Editor.insertBreak(editor)\n            break\n          }\n\n          case 'insertFromComposition':\n          case 'insertFromDrop':\n          case 'insertFromPaste':\n          case 'insertFromYank':\n          case 'insertReplacementText':\n          case 'insertText': {\n            if (type === 'insertFromComposition') {\n              // COMPAT: in Safari, `compositionend` is dispatched after the\n              // `beforeinput` for \"insertFromComposition\". But if we wait for it\n              // then we will abort because we're still composing and the selection\n              // won't be updated properly.\n              // https://www.w3.org/TR/input-events-2/\n              state.isComposing && setIsComposing(false)\n              state.isComposing = false\n            }\n\n            const window = ReactEditor.getWindow(editor)\n            if (data instanceof window.DataTransfer) {\n              ReactEditor.insertData(editor, data as DataTransfer)\n            } else if (typeof data === 'string') {\n              Editor.insertText(editor, data)\n            }\n\n            break\n          }\n        }\n      }\n    },\n    [readOnly, propsOnDOMBeforeInput]\n  )\n\n  // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  // https://github.com/facebook/react/issues/11211\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n      // @ts-ignore The `beforeinput` event isn't recognized.\n      ref.current.addEventListener('beforeinput', onDOMBeforeInput)\n    }\n\n    return () => {\n      if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput)\n      }\n    }\n  }, [onDOMBeforeInput])\n\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  const onDOMSelectionChange = useCallback(\n    throttle(() => {\n      if (\n        !readOnly &&\n        !state.isComposing &&\n        !state.isUpdatingSelection &&\n        !state.isDraggingInternally\n      ) {\n        const root = ReactEditor.findDocumentOrShadowRoot(editor)\n        const { activeElement } = root\n        const el = ReactEditor.toDOMNode(editor, editor)\n        const domSelection = root.getSelection()\n\n        if (activeElement === el) {\n          state.latestElement = activeElement\n          IS_FOCUSED.set(editor, true)\n        } else {\n          IS_FOCUSED.delete(editor)\n        }\n\n        if (!domSelection) {\n          return Transforms.deselect(editor)\n        }\n\n        const { anchorNode, focusNode } = domSelection\n\n        const anchorNodeSelectable =\n          hasEditableTarget(editor, anchorNode) ||\n          isTargetInsideVoid(editor, anchorNode)\n\n        const focusNodeSelectable =\n          hasEditableTarget(editor, focusNode) ||\n          isTargetInsideVoid(editor, focusNode)\n\n        if (anchorNodeSelectable && focusNodeSelectable) {\n          const range = ReactEditor.toSlateRange(editor, domSelection, {\n            exactMatch: false,\n          })\n          Transforms.select(editor, range)\n        } else {\n          Transforms.deselect(editor)\n        }\n      }\n    }, 100),\n    [readOnly]\n  )\n\n  // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n  useIsomorphicLayoutEffect(() => {\n    const window = ReactEditor.getWindow(editor)\n    window.document.addEventListener('selectionchange', onDOMSelectionChange)\n\n    return () => {\n      window.document.removeEventListener(\n        'selectionchange',\n        onDOMSelectionChange\n      )\n    }\n  }, [onDOMSelectionChange])\n\n  const decorations = decorate([editor, []])\n\n  if (\n    placeholder &&\n    editor.children.length === 1 &&\n    Array.from(Node.texts(editor)).length === 1 &&\n    Node.string(editor) === '' &&\n    !isComposing\n  ) {\n    const start = Editor.start(editor, [])\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start,\n    })\n  }\n\n  return (\n    <ReadOnlyContext.Provider value={readOnly}>\n      <DecorateContext.Provider value={decorate}>\n        <Component\n          // COMPAT: The Grammarly Chrome extension works by changing the DOM\n          // out from under `contenteditable` elements, which leads to weird\n          // behaviors so we have to disable it like editor. (2017/04/24)\n          data-gramm={false}\n          role={readOnly ? undefined : 'textbox'}\n          {...attributes}\n          // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n          // have to use hacks to make these replacement-based features work.\n          spellCheck={!HAS_BEFORE_INPUT_SUPPORT ? false : attributes.spellCheck}\n          autoCorrect={\n            !HAS_BEFORE_INPUT_SUPPORT ? 'false' : attributes.autoCorrect\n          }\n          autoCapitalize={\n            !HAS_BEFORE_INPUT_SUPPORT ? 'false' : attributes.autoCapitalize\n          }\n          data-slate-editor\n          data-slate-node=\"value\"\n          contentEditable={readOnly ? undefined : true}\n          suppressContentEditableWarning\n          ref={ref}\n          style={{\n            // Allow positioning relative to the editable element.\n            position: 'relative',\n            // Prevent the default outline styles.\n            outline: 'none',\n            // Preserve adjacent whitespace and new lines.\n            whiteSpace: 'pre-wrap',\n            // Allow words to break if they are too long.\n            wordWrap: 'break-word',\n            // Allow for passed-in styles to override anything.\n            ...style,\n          }}\n          onBeforeInput={useCallback(\n            (event: React.FormEvent<HTMLDivElement>) => {\n              // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n              // fall back to React's leaky polyfill instead just for it. It\n              // only works for the `insertText` input type.\n              if (\n                !HAS_BEFORE_INPUT_SUPPORT &&\n                !readOnly &&\n                !isEventHandled(event, attributes.onBeforeInput) &&\n                hasEditableTarget(editor, event.target)\n              ) {\n                event.preventDefault()\n                if (!state.isComposing) {\n                  const text = (event as any).data as string\n                  Editor.insertText(editor, text)\n                }\n              }\n            },\n            [readOnly]\n          )}\n          onBlur={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                readOnly ||\n                state.isUpdatingSelection ||\n                !hasEditableTarget(editor, event.target) ||\n                isEventHandled(event, attributes.onBlur)\n              ) {\n                return\n              }\n\n              // COMPAT: If the current `activeElement` is still the previous\n              // one, this is due to the window being blurred when the tab\n              // itself becomes unfocused, so we want to abort early to allow to\n              // editor to stay focused when the tab becomes focused again.\n              const root = ReactEditor.findDocumentOrShadowRoot(editor)\n              if (state.latestElement === root.activeElement) {\n                return\n              }\n\n              const { relatedTarget } = event\n              const el = ReactEditor.toDOMNode(editor, editor)\n\n              // COMPAT: The event should be ignored if the focus is returning\n              // to the editor from an embedded editable element (eg. an <input>\n              // element inside a void node).\n              if (relatedTarget === el) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving from\n              // the editor to inside a void node's spacer element.\n              if (\n                isDOMElement(relatedTarget) &&\n                relatedTarget.hasAttribute('data-slate-spacer')\n              ) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving to a\n              // non- editable section of an element that isn't a void node (eg.\n              // a list item of the check list example).\n              if (\n                relatedTarget != null &&\n                isDOMNode(relatedTarget) &&\n                ReactEditor.hasDOMNode(editor, relatedTarget)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, relatedTarget)\n\n                if (Element.isElement(node) && !editor.isVoid(node)) {\n                  return\n                }\n              }\n\n              // COMPAT: Safari doesn't always remove the selection even if the content-\n              // editable element no longer has focus. Refer to:\n              // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n              if (IS_SAFARI) {\n                const domSelection = root.getSelection()\n                domSelection?.removeAllRanges()\n              }\n\n              IS_FOCUSED.delete(editor)\n            },\n            [readOnly, attributes.onBlur]\n          )}\n          onClick={useCallback(\n            (event: React.MouseEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onClick) &&\n                isDOMNode(event.target)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, event.target)\n                const path = ReactEditor.findPath(editor, node)\n                const start = Editor.start(editor, path)\n                const end = Editor.end(editor, path)\n\n                const startVoid = Editor.void(editor, { at: start })\n                const endVoid = Editor.void(editor, { at: end })\n\n                if (\n                  startVoid &&\n                  endVoid &&\n                  Path.equals(startVoid[1], endVoid[1])\n                ) {\n                  const range = Editor.range(editor, start)\n                  Transforms.select(editor, range)\n                }\n              }\n            },\n            [readOnly, attributes.onClick]\n          )}\n          onCompositionEnd={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionEnd)\n              ) {\n                state.isComposing && setIsComposing(false)\n                state.isComposing = false\n\n                // COMPAT: In Chrome, `beforeinput` events for compositions\n                // aren't correct and never fire the \"insertFromComposition\"\n                // type that we need. So instead, insert whenever a composition\n                // ends since it will already have been committed to the DOM.\n                if (!IS_SAFARI && !IS_FIREFOX_LEGACY && !IS_IOS && event.data) {\n                  Editor.insertText(editor, event.data)\n                }\n              }\n            },\n            [attributes.onCompositionEnd]\n          )}\n          onCompositionUpdate={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionUpdate)\n              ) {\n                !state.isComposing && setIsComposing(true)\n                state.isComposing = true\n              }\n            },\n            [attributes.onCompositionUpdate]\n          )}\n          onCompositionStart={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionStart)\n              ) {\n                const { selection } = editor\n                if (selection && Range.isExpanded(selection)) {\n                  Editor.deleteFragment(editor)\n                }\n              }\n            },\n            [attributes.onCompositionStart]\n          )}\n          onCopy={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCopy)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData)\n              }\n            },\n            [attributes.onCopy]\n          )}\n          onCut={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCut)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData)\n                const { selection } = editor\n\n                if (selection) {\n                  if (Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    const node = Node.parent(editor, selection.anchor.path)\n                    if (Editor.isVoid(editor, node)) {\n                      Transforms.delete(editor)\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onCut]\n          )}\n          onDragOver={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDragOver)\n              ) {\n                // Only when the target is void, call `preventDefault` to signal\n                // that drops are allowed. Editable content is droppable by\n                // default, and calling `preventDefault` hides the cursor.\n                const node = ReactEditor.toSlateNode(editor, event.target)\n\n                if (Editor.isVoid(editor, node)) {\n                  event.preventDefault()\n                }\n              }\n            },\n            [attributes.onDragOver]\n          )}\n          onDragStart={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDragStart)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, event.target)\n                const path = ReactEditor.findPath(editor, node)\n                const voidMatch =\n                  Editor.isVoid(editor, node) ||\n                  Editor.void(editor, { at: path, voids: true })\n\n                // If starting a drag on a void node, make sure it is selected\n                // so that it shows up in the selection's fragment.\n                if (voidMatch) {\n                  const range = Editor.range(editor, path)\n                  Transforms.select(editor, range)\n                }\n\n                state.isDraggingInternally = true\n\n                ReactEditor.setFragmentData(editor, event.dataTransfer)\n              }\n            },\n            [attributes.onDragStart]\n          )}\n          onDrop={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDrop)\n              ) {\n                event.preventDefault()\n\n                // Keep a reference to the dragged range before updating selection\n                const draggedRange = editor.selection\n\n                // Find the range where the drop happened\n                const range = ReactEditor.findEventRange(editor, event)\n                const data = event.dataTransfer\n\n                Transforms.select(editor, range)\n\n                if (state.isDraggingInternally) {\n                  if (draggedRange) {\n                    Transforms.delete(editor, {\n                      at: draggedRange,\n                    })\n                  }\n\n                  state.isDraggingInternally = false\n                }\n\n                ReactEditor.insertData(editor, data)\n\n                // When dragging from another source into the editor, it's possible\n                // that the current editor does not have focus.\n                if (!ReactEditor.isFocused(editor)) {\n                  ReactEditor.focus(editor)\n                }\n              }\n            },\n            [readOnly, attributes.onDrop]\n          )}\n          onDragEnd={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              // When dropping on a different droppable element than the current editor,\n              // `onDrop` is not called. So we need to clean up in `onDragEnd` instead.\n              // Note: `onDragEnd` is only called when `onDrop` is not called\n              if (\n                !readOnly &&\n                state.isDraggingInternally &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDragEnd)\n              ) {\n                state.isDraggingInternally = false\n              }\n            },\n            [readOnly, attributes.onDragEnd]\n          )}\n          onFocus={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                !state.isUpdatingSelection &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onFocus)\n              ) {\n                const el = ReactEditor.toDOMNode(editor, editor)\n                const root = ReactEditor.findDocumentOrShadowRoot(editor)\n                state.latestElement = root.activeElement\n\n                // COMPAT: If the editor has nested editable elements, the focus\n                // can go to them. In Firefox, this must be prevented because it\n                // results in issues with keyboard navigation. (2017/03/30)\n                if (IS_FIREFOX && event.target !== el) {\n                  el.focus()\n                  return\n                }\n\n                IS_FOCUSED.set(editor, true)\n              }\n            },\n            [readOnly, attributes.onFocus]\n          )}\n          onKeyDown={useCallback(\n            (event: React.KeyboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onKeyDown)\n              ) {\n                const { nativeEvent } = event\n                const { selection } = editor\n\n                const element =\n                  editor.children[\n                    selection !== null ? selection.focus.path[0] : 0\n                  ]\n                const isRTL = getDirection(Node.string(element)) === 'rtl'\n\n                // COMPAT: Since we prevent the default behavior on\n                // `beforeinput` events, the browser doesn't think there's ever\n                // any history stack to undo or redo, so we have to manage these\n                // hotkeys ourselves. (2019/11/06)\n                if (Hotkeys.isRedo(nativeEvent)) {\n                  event.preventDefault()\n                  const maybeHistoryEditor: any = editor\n\n                  if (typeof maybeHistoryEditor.redo === 'function') {\n                    maybeHistoryEditor.redo()\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isUndo(nativeEvent)) {\n                  event.preventDefault()\n                  const maybeHistoryEditor: any = editor\n\n                  if (typeof maybeHistoryEditor.undo === 'function') {\n                    maybeHistoryEditor.undo()\n                  }\n\n                  return\n                }\n\n                // COMPAT: Certain browsers don't handle the selection updates\n                // properly. In Chrome, the selection isn't properly extended.\n                // And in Firefox, the selection isn't properly collapsed.\n                // (2017/10/17)\n                if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line', reverse: true })\n                  return\n                }\n\n                if (Hotkeys.isMoveLineForward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line' })\n                  return\n                }\n\n                if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, {\n                    unit: 'line',\n                    edge: 'focus',\n                    reverse: true,\n                  })\n                  return\n                }\n\n                if (Hotkeys.isExtendLineForward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line', edge: 'focus' })\n                  return\n                }\n\n                // COMPAT: If a void node is selected, or a zero-width text node\n                // adjacent to an inline is selected, we need to handle these\n                // hotkeys manually because browsers won't be able to skip over\n                // the void node with the zero-width space not being an empty\n                // string.\n                if (Hotkeys.isMoveBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isCollapsed(selection)) {\n                    Transforms.move(editor, { reverse: !isRTL })\n                  } else {\n                    Transforms.collapse(editor, { edge: 'start' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isMoveForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isCollapsed(selection)) {\n                    Transforms.move(editor, { reverse: isRTL })\n                  } else {\n                    Transforms.collapse(editor, { edge: 'end' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Transforms.collapse(editor, { edge: 'focus' })\n                  }\n\n                  Transforms.move(editor, { unit: 'word', reverse: !isRTL })\n                  return\n                }\n\n                if (Hotkeys.isMoveWordForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Transforms.collapse(editor, { edge: 'focus' })\n                  }\n\n                  Transforms.move(editor, { unit: 'word', reverse: isRTL })\n                  return\n                }\n\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to guessing at the input intention for hotkeys.\n                // COMPAT: In iOS, some of these hotkeys are handled in the\n                if (!HAS_BEFORE_INPUT_SUPPORT) {\n                  // We don't have a core behavior for these, but they change the\n                  // DOM if we don't prevent them, so we have to.\n                  if (\n                    Hotkeys.isBold(nativeEvent) ||\n                    Hotkeys.isItalic(nativeEvent) ||\n                    Hotkeys.isTransposeCharacter(nativeEvent)\n                  ) {\n                    event.preventDefault()\n                    return\n                  }\n\n                  if (Hotkeys.isSplitBlock(nativeEvent)) {\n                    event.preventDefault()\n                    Editor.insertBreak(editor)\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor)\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor)\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor, { unit: 'line' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor, { unit: 'line' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor, { unit: 'word' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor, { unit: 'word' })\n                    }\n\n                    return\n                  }\n                } else {\n                  if (IS_CHROME || IS_SAFARI) {\n                    // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n                    // an event when deleting backwards in a selected void inline node\n                    if (\n                      selection &&\n                      (Hotkeys.isDeleteBackward(nativeEvent) ||\n                        Hotkeys.isDeleteForward(nativeEvent)) &&\n                      Range.isCollapsed(selection)\n                    ) {\n                      const currentNode = Node.parent(\n                        editor,\n                        selection.anchor.path\n                      )\n\n                      if (\n                        Element.isElement(currentNode) &&\n                        Editor.isVoid(editor, currentNode) &&\n                        Editor.isInline(editor, currentNode)\n                      ) {\n                        event.preventDefault()\n                        Transforms.delete(editor, { unit: 'block' })\n\n                        return\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onKeyDown]\n          )}\n          onPaste={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onPaste)\n              ) {\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to React's `onPaste` here instead.\n                // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n                // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n                if (\n                  !HAS_BEFORE_INPUT_SUPPORT ||\n                  isPlainTextOnlyPaste(event.nativeEvent)\n                ) {\n                  event.preventDefault()\n                  ReactEditor.insertData(editor, event.clipboardData)\n                }\n              }\n            },\n            [readOnly, attributes.onPaste]\n          )}\n        >\n          <Children\n            decorations={decorations}\n            node={editor}\n            renderElement={renderElement}\n            renderPlaceholder={renderPlaceholder}\n            renderLeaf={renderLeaf}\n            selection={editor.selection}\n          />\n        </Component>\n      </DecorateContext.Provider>\n    </ReadOnlyContext.Provider>\n  )\n}\n\n/**\n * The props that get passed to renderPlaceholder\n */\nexport type RenderPlaceholderProps = {\n  children: any\n  attributes: {\n    'data-slate-placeholder': boolean\n    dir?: 'rtl'\n    contentEditable: boolean\n    ref: React.RefObject<any>\n    style: React.CSSProperties\n  }\n}\n\n/**\n * The default placeholder element\n */\n\nexport const DefaultPlaceholder = ({\n  attributes,\n  children,\n}: RenderPlaceholderProps) => <span {...attributes}>{children}</span>\n\n/**\n * A default memoized decorate function.\n */\n\nexport const defaultDecorate: (entry: NodeEntry) => Range[] = () => []\n\n/**\n * A default implement to scroll dom range into view.\n */\n\nconst defaultScrollSelectionIntoView = (\n  editor: ReactEditor,\n  domRange: DOMRange\n) => {\n  const leafEl = domRange.startContainer.parentElement!\n  leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange)\n  scrollIntoView(leafEl, {\n    scrollMode: 'if-needed',\n  })\n  delete leafEl.getBoundingClientRect\n}\n\n/**\n * Check if two DOM range objects are equal.\n */\n\nexport const isRangeEqual = (a: DOMRange, b: DOMRange) => {\n  return (\n    (a.startContainer === b.startContainer &&\n      a.startOffset === b.startOffset &&\n      a.endContainer === b.endContainer &&\n      a.endOffset === b.endOffset) ||\n    (a.startContainer === b.endContainer &&\n      a.startOffset === b.endOffset &&\n      a.endContainer === b.startContainer &&\n      a.endOffset === b.startOffset)\n  )\n}\n\n/**\n * Check if the target is in the editor.\n */\n\nexport const hasTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target)\n}\n\n/**\n * Check if the target is editable and in the editor.\n */\n\nexport const hasEditableTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return (\n    isDOMNode(target) &&\n    ReactEditor.hasDOMNode(editor, target, { editable: true })\n  )\n}\n\n/**\n * Check if the target is inside void and in the editor.\n */\n\nexport const isTargetInsideVoid = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): boolean => {\n  const slateNode =\n    hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target)\n  return Editor.isVoid(editor, slateNode)\n}\n\n/**\n * Check if an event is overrided by a handler.\n */\n\nexport const isEventHandled = <\n  EventType extends React.SyntheticEvent<unknown, unknown>\n>(\n  event: EventType,\n  handler?: (event: EventType) => void | boolean\n) => {\n  if (!handler) {\n    return false\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event)\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled\n  }\n\n  return event.isDefaultPrevented() || event.isPropagationStopped()\n}\n\n/**\n * Check if a DOM event is overrided by a handler.\n */\n\nexport const isDOMEventHandled = <E extends Event>(\n  event: E,\n  handler?: (event: E) => void | boolean\n) => {\n  if (!handler) {\n    return false\n  }\n\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event)\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled\n  }\n\n  return event.defaultPrevented\n}\n","/**\n * An auto-incrementing identifier for keys.\n */\n\nlet n = 0\n\n/**\n * A class that keeps track of a key string. We use a full class here because we\n * want to be able to use them as keys in `WeakMap` objects.\n */\n\nexport class Key {\n  id: string\n\n  constructor() {\n    this.id = `${n++}`\n  }\n}\n","import { Editor, Node, Path, Point, Range, Transforms, BaseEditor } from 'slate'\n\nimport { Key } from '../utils/key'\nimport {\n  EDITOR_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  IS_FOCUSED,\n  IS_READ_ONLY,\n  KEY_TO_ELEMENT,\n  NODE_TO_INDEX,\n  NODE_TO_KEY,\n  NODE_TO_PARENT,\n  EDITOR_TO_WINDOW,\n} from '../utils/weak-maps'\nimport {\n  DOMElement,\n  DOMNode,\n  DOMPoint,\n  DOMRange,\n  DOMSelection,\n  DOMStaticRange,\n  isDOMElement,\n  isDOMSelection,\n  normalizeDOMPoint,\n  hasShadowRoot,\n} from '../utils/dom'\nimport { IS_CHROME } from '../utils/environment'\n\n/**\n * A React and DOM-specific version of the `Editor` interface.\n */\n\nexport interface ReactEditor extends BaseEditor {\n  insertData: (data: DataTransfer) => void\n  setFragmentData: (data: DataTransfer) => void\n  hasRange: (editor: ReactEditor, range: Range) => boolean\n}\n\nexport const ReactEditor = {\n  /**\n   * Return the host window of the current editor.\n   */\n\n  getWindow(editor: ReactEditor): Window {\n    const window = EDITOR_TO_WINDOW.get(editor)\n    if (!window) {\n      throw new Error('Unable to find a host window element for this editor')\n    }\n    return window\n  },\n\n  /**\n   * Find a key for a Slate node.\n   */\n\n  findKey(editor: ReactEditor, node: Node): Key {\n    let key = NODE_TO_KEY.get(node)\n\n    if (!key) {\n      key = new Key()\n      NODE_TO_KEY.set(node, key)\n    }\n\n    return key\n  },\n\n  /**\n   * Find the path of Slate node.\n   */\n\n  findPath(editor: ReactEditor, node: Node): Path {\n    const path: Path = []\n    let child = node\n\n    while (true) {\n      const parent = NODE_TO_PARENT.get(child)\n\n      if (parent == null) {\n        if (Editor.isEditor(child)) {\n          return path\n        } else {\n          break\n        }\n      }\n\n      const i = NODE_TO_INDEX.get(child)\n\n      if (i == null) {\n        break\n      }\n\n      path.unshift(i)\n      child = parent\n    }\n\n    throw new Error(\n      `Unable to find the path for Slate node: ${JSON.stringify(node)}`\n    )\n  },\n\n  /**\n   * Find the DOM node that implements DocumentOrShadowRoot for the editor.\n   */\n\n  findDocumentOrShadowRoot(editor: ReactEditor): Document | ShadowRoot {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = el.getRootNode()\n\n    if (\n      (root instanceof Document || root instanceof ShadowRoot) &&\n      root.getSelection != null\n    ) {\n      return root\n    }\n\n    return el.ownerDocument\n  },\n\n  /**\n   * Check if the editor is focused.\n   */\n\n  isFocused(editor: ReactEditor): boolean {\n    return !!IS_FOCUSED.get(editor)\n  },\n\n  /**\n   * Check if the editor is in read-only mode.\n   */\n\n  isReadOnly(editor: ReactEditor): boolean {\n    return !!IS_READ_ONLY.get(editor)\n  },\n\n  /**\n   * Blur the editor.\n   */\n\n  blur(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    IS_FOCUSED.set(editor, false)\n\n    if (root.activeElement === el) {\n      el.blur()\n    }\n  },\n\n  /**\n   * Focus the editor.\n   */\n\n  focus(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    IS_FOCUSED.set(editor, true)\n\n    if (root.activeElement !== el) {\n      el.focus({ preventScroll: true })\n    }\n  },\n\n  /**\n   * Deselect the editor.\n   */\n\n  deselect(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const { selection } = editor\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    const domSelection = root.getSelection()\n\n    if (domSelection && domSelection.rangeCount > 0) {\n      domSelection.removeAllRanges()\n    }\n\n    if (selection) {\n      Transforms.deselect(editor)\n    }\n  },\n\n  /**\n   * Check if a DOM node is within the editor.\n   */\n\n  hasDOMNode(\n    editor: ReactEditor,\n    target: DOMNode,\n    options: { editable?: boolean } = {}\n  ): boolean {\n    const { editable = false } = options\n    const editorEl = ReactEditor.toDOMNode(editor, editor)\n    let targetEl\n\n    // COMPAT: In Firefox, reading `target.nodeType` will throw an error if\n    // target is originating from an internal \"restricted\" element (e.g. a\n    // stepper arrow on a number input). (2018/05/04)\n    // https://github.com/ianstormtaylor/slate/issues/1819\n    try {\n      targetEl = (isDOMElement(target)\n        ? target\n        : target.parentElement) as HTMLElement\n    } catch (err) {\n      if (\n        !err.message.includes('Permission denied to access property \"nodeType\"')\n      ) {\n        throw err\n      }\n    }\n\n    if (!targetEl) {\n      return false\n    }\n\n    return (\n      targetEl.closest(`[data-slate-editor]`) === editorEl &&\n      (!editable ||\n        targetEl.isContentEditable ||\n        !!targetEl.getAttribute('data-slate-zero-width'))\n    )\n  },\n\n  /**\n   * Insert data from a `DataTransfer` into the editor.\n   */\n\n  insertData(editor: ReactEditor, data: DataTransfer): void {\n    editor.insertData(data)\n  },\n\n  /**\n   * Sets data from the currently selected fragment on a `DataTransfer`.\n   */\n\n  setFragmentData(editor: ReactEditor, data: DataTransfer): void {\n    editor.setFragmentData(data)\n  },\n\n  /**\n   * Find the native DOM element from a Slate node.\n   */\n\n  toDOMNode(editor: ReactEditor, node: Node): HTMLElement {\n    const domNode = Editor.isEditor(node)\n      ? EDITOR_TO_ELEMENT.get(editor)\n      : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node))\n\n    if (!domNode) {\n      throw new Error(\n        `Cannot resolve a DOM node from Slate node: ${JSON.stringify(node)}`\n      )\n    }\n\n    return domNode\n  },\n\n  /**\n   * Find a native DOM selection point from a Slate point.\n   */\n\n  toDOMPoint(editor: ReactEditor, point: Point): DOMPoint {\n    const [node] = Editor.node(editor, point.path)\n    const el = ReactEditor.toDOMNode(editor, node)\n    let domPoint: DOMPoint | undefined\n\n    // If we're inside a void node, force the offset to 0, otherwise the zero\n    // width spacing character will result in an incorrect offset of 1\n    if (Editor.void(editor, { at: point })) {\n      point = { path: point.path, offset: 0 }\n    }\n\n    // For each leaf, we need to isolate its content, which means filtering\n    // to its direct text and zero-width spans. (We have to filter out any\n    // other siblings that may have been rendered alongside them.)\n    const selector = `[data-slate-string], [data-slate-zero-width]`\n    const texts = Array.from(el.querySelectorAll(selector))\n    let start = 0\n\n    for (const text of texts) {\n      const domNode = text.childNodes[0] as HTMLElement\n\n      if (domNode == null || domNode.textContent == null) {\n        continue\n      }\n\n      const { length } = domNode.textContent\n      const attr = text.getAttribute('data-slate-length')\n      const trueLength = attr == null ? length : parseInt(attr, 10)\n      const end = start + trueLength\n\n      if (point.offset <= end) {\n        const offset = Math.min(length, Math.max(0, point.offset - start))\n        domPoint = [domNode, offset]\n        break\n      }\n\n      start = end\n    }\n\n    if (!domPoint) {\n      throw new Error(\n        `Cannot resolve a DOM point from Slate point: ${JSON.stringify(point)}`\n      )\n    }\n\n    return domPoint\n  },\n\n  /**\n   * Find a native DOM range from a Slate `range`.\n   *\n   * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.\n   *\n   * there is no way to create a reverse DOM Range using Range.setStart/setEnd\n   * according to https://dom.spec.whatwg.org/#concept-range-bp-set.\n   */\n\n  toDOMRange(editor: ReactEditor, range: Range): DOMRange {\n    const { anchor, focus } = range\n    const isBackward = Range.isBackward(range)\n    const domAnchor = ReactEditor.toDOMPoint(editor, anchor)\n    const domFocus = Range.isCollapsed(range)\n      ? domAnchor\n      : ReactEditor.toDOMPoint(editor, focus)\n\n    const window = ReactEditor.getWindow(editor)\n    const domRange = window.document.createRange()\n    const [startNode, startOffset] = isBackward ? domFocus : domAnchor\n    const [endNode, endOffset] = isBackward ? domAnchor : domFocus\n\n    // A slate Point at zero-width Leaf always has an offset of 0 but a native DOM selection at\n    // zero-width node has an offset of 1 so we have to check if we are in a zero-width node and\n    // adjust the offset accordingly.\n    const startEl = (isDOMElement(startNode)\n      ? startNode\n      : startNode.parentElement) as HTMLElement\n    const isStartAtZeroWidth = !!startEl.getAttribute('data-slate-zero-width')\n    const endEl = (isDOMElement(endNode)\n      ? endNode\n      : endNode.parentElement) as HTMLElement\n    const isEndAtZeroWidth = !!endEl.getAttribute('data-slate-zero-width')\n\n    domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset)\n    domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset)\n    return domRange\n  },\n\n  /**\n   * Find a Slate node from a native DOM `element`.\n   */\n\n  toSlateNode(editor: ReactEditor, domNode: DOMNode): Node {\n    let domEl = isDOMElement(domNode) ? domNode : domNode.parentElement\n\n    if (domEl && !domEl.hasAttribute('data-slate-node')) {\n      domEl = domEl.closest(`[data-slate-node]`)\n    }\n\n    const node = domEl ? ELEMENT_TO_NODE.get(domEl as HTMLElement) : null\n\n    if (!node) {\n      throw new Error(`Cannot resolve a Slate node from DOM node: ${domEl}`)\n    }\n\n    return node\n  },\n\n  /**\n   * Get the target range from a DOM `event`.\n   */\n\n  findEventRange(editor: ReactEditor, event: any): Range {\n    if ('nativeEvent' in event) {\n      event = event.nativeEvent\n    }\n\n    const { clientX: x, clientY: y, target } = event\n\n    if (x == null || y == null) {\n      throw new Error(`Cannot resolve a Slate range from a DOM event: ${event}`)\n    }\n\n    const node = ReactEditor.toSlateNode(editor, event.target)\n    const path = ReactEditor.findPath(editor, node)\n\n    // If the drop target is inside a void node, move it into either the\n    // next or previous node, depending on which side the `x` and `y`\n    // coordinates are closest to.\n    if (Editor.isVoid(editor, node)) {\n      const rect = target.getBoundingClientRect()\n      const isPrev = editor.isInline(node)\n        ? x - rect.left < rect.left + rect.width - x\n        : y - rect.top < rect.top + rect.height - y\n\n      const edge = Editor.point(editor, path, {\n        edge: isPrev ? 'start' : 'end',\n      })\n      const point = isPrev\n        ? Editor.before(editor, edge)\n        : Editor.after(editor, edge)\n\n      if (point) {\n        const range = Editor.range(editor, point)\n        return range\n      }\n    }\n\n    // Else resolve a range from the caret position where the drop occured.\n    let domRange\n    const { document } = window\n\n    // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)\n    if (document.caretRangeFromPoint) {\n      domRange = document.caretRangeFromPoint(x, y)\n    } else {\n      const position = document.caretPositionFromPoint(x, y)\n\n      if (position) {\n        domRange = document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      }\n    }\n\n    if (!domRange) {\n      throw new Error(`Cannot resolve a Slate range from a DOM event: ${event}`)\n    }\n\n    // Resolve a Slate range from the DOM range.\n    const range = ReactEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n    })\n    return range\n  },\n\n  /**\n   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.\n   */\n\n  toSlatePoint<T extends boolean>(\n    editor: ReactEditor,\n    domPoint: DOMPoint,\n    exactMatch: T\n  ): T extends true ? Point | null : Point {\n    const [nearestNode, nearestOffset] = exactMatch\n      ? domPoint\n      : normalizeDOMPoint(domPoint)\n    const parentNode = nearestNode.parentNode as DOMElement\n    let textNode: DOMElement | null = null\n    let offset = 0\n\n    if (parentNode) {\n      const voidNode = parentNode.closest('[data-slate-void=\"true\"]')\n      let leafNode = parentNode.closest('[data-slate-leaf]')\n      let domNode: DOMElement | null = null\n\n      // Calculate how far into the text node the `nearestNode` is, so that we\n      // can determine what the offset relative to the text node is.\n      if (leafNode) {\n        textNode = leafNode.closest('[data-slate-node=\"text\"]')!\n        const window = ReactEditor.getWindow(editor)\n        const range = window.document.createRange()\n        range.setStart(textNode, 0)\n        range.setEnd(nearestNode, nearestOffset)\n        const contents = range.cloneContents()\n        const removals = [\n          ...Array.prototype.slice.call(\n            contents.querySelectorAll('[data-slate-zero-width]')\n          ),\n          ...Array.prototype.slice.call(\n            contents.querySelectorAll('[contenteditable=false]')\n          ),\n        ]\n\n        removals.forEach(el => {\n          el!.parentNode!.removeChild(el)\n        })\n\n        // COMPAT: Edge has a bug where Range.prototype.toString() will\n        // convert \\n into \\r\\n. The bug causes a loop when slate-react\n        // attempts to reposition its cursor to match the native position. Use\n        // textContent.length instead.\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/\n        offset = contents.textContent!.length\n        domNode = textNode\n      } else if (voidNode) {\n        // For void nodes, the element with the offset key will be a cousin, not an\n        // ancestor, so find it by going down from the nearest void parent.\n        leafNode = voidNode.querySelector('[data-slate-leaf]')!\n\n        // COMPAT: In read-only editors the leaf is not rendered.\n        if (!leafNode) {\n          offset = 1\n        } else {\n          textNode = leafNode.closest('[data-slate-node=\"text\"]')!\n          domNode = leafNode\n          offset = domNode.textContent!.length\n          domNode.querySelectorAll('[data-slate-zero-width]').forEach(el => {\n            offset -= el.textContent!.length\n          })\n        }\n      }\n\n      // COMPAT: If the parent node is a Slate zero-width space, editor is\n      // because the text node should have no characters. However, during IME\n      // composition the ASCII characters will be prepended to the zero-width\n      // space, so subtract 1 from the offset to account for the zero-width\n      // space character.\n      if (\n        domNode &&\n        offset === domNode.textContent!.length &&\n        parentNode.hasAttribute('data-slate-zero-width')\n      ) {\n        offset--\n      }\n    }\n\n    if (!textNode) {\n      if (exactMatch) {\n        return null as T extends true ? Point | null : Point\n      }\n      throw new Error(\n        `Cannot resolve a Slate point from DOM point: ${domPoint}`\n      )\n    }\n\n    // COMPAT: If someone is clicking from one Slate editor into another,\n    // the select event fires twice, once for the old editor's `element`\n    // first, and then afterwards for the correct `element`. (2017/03/03)\n    const slateNode = ReactEditor.toSlateNode(editor, textNode!)\n    const path = ReactEditor.findPath(editor, slateNode)\n    return { path, offset } as T extends true ? Point | null : Point\n  },\n\n  /**\n   * Find a Slate range from a DOM range or selection.\n   */\n\n  toSlateRange<T extends boolean>(\n    editor: ReactEditor,\n    domRange: DOMRange | DOMStaticRange | DOMSelection,\n    options: {\n      exactMatch: T\n    }\n  ): T extends true ? Range | null : Range {\n    const { exactMatch } = options\n    const el = isDOMSelection(domRange)\n      ? domRange.anchorNode\n      : domRange.startContainer\n    let anchorNode\n    let anchorOffset\n    let focusNode\n    let focusOffset\n    let isCollapsed\n\n    if (el) {\n      if (isDOMSelection(domRange)) {\n        anchorNode = domRange.anchorNode\n        anchorOffset = domRange.anchorOffset\n        focusNode = domRange.focusNode\n        focusOffset = domRange.focusOffset\n        // COMPAT: There's a bug in chrome that always returns `true` for\n        // `isCollapsed` for a Selection that comes from a ShadowRoot.\n        // (2020/08/08)\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n        if (IS_CHROME && hasShadowRoot()) {\n          isCollapsed =\n            domRange.anchorNode === domRange.focusNode &&\n            domRange.anchorOffset === domRange.focusOffset\n        } else {\n          isCollapsed = domRange.isCollapsed\n        }\n      } else {\n        anchorNode = domRange.startContainer\n        anchorOffset = domRange.startOffset\n        focusNode = domRange.endContainer\n        focusOffset = domRange.endOffset\n        isCollapsed = domRange.collapsed\n      }\n    }\n\n    if (\n      anchorNode == null ||\n      focusNode == null ||\n      anchorOffset == null ||\n      focusOffset == null\n    ) {\n      throw new Error(\n        `Cannot resolve a Slate range from DOM range: ${domRange}`\n      )\n    }\n\n    const anchor = ReactEditor.toSlatePoint(\n      editor,\n      [anchorNode, anchorOffset],\n      exactMatch\n    )\n    if (!anchor) {\n      return null as T extends true ? Range | null : Range\n    }\n\n    const focus = isCollapsed\n      ? anchor\n      : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset], exactMatch)\n    if (!focus) {\n      return null as T extends true ? Range | null : Range\n    }\n\n    return ({ anchor, focus } as unknown) as T extends true\n      ? Range | null\n      : Range\n  },\n\n  hasRange(editor: ReactEditor, range: Range): boolean {\n    const { anchor, focus } = range\n    return (\n      Editor.hasPath(editor, anchor.path) && Editor.hasPath(editor, focus.path)\n    )\n  },\n}\n","import { Editor, Path, Range, Text } from 'slate'\n\nimport { ReactEditor } from '../../'\nimport { DOMNode } from '../../utils/dom'\n\nexport type Diff = {\n  start: number\n  end: number\n  insertText: string\n  removeText: string\n}\n\nexport interface TextInsertion {\n  text: Diff\n  path: Path\n}\n\ntype TextRange = {\n  start: number\n  end: number\n}\n\n/**\n * Returns the number of characters that are the same at the beginning of the\n * String.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @returns the offset of the start of the difference; null if there is no difference\n */\nfunction getDiffStart(prev: string, next: string): number | null {\n  const length = Math.min(prev.length, next.length)\n\n  for (let i = 0; i < length; i++) {\n    if (prev.charAt(i) !== next.charAt(i)) return i\n  }\n\n  if (prev.length !== next.length) return length\n  return null\n}\n\n/**\n * Returns the number of characters that are the same at the end of the String\n * up to `max`. Max prevents double-counting characters when there are\n * multiple duplicate characters around the diff area.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @param max  the max length to test.\n * @returns number of characters that are the same at the end of the string\n */\nfunction getDiffEnd(prev: string, next: string, max: number): number | null {\n  const prevLength = prev.length\n  const nextLength = next.length\n  const length = Math.min(prevLength, nextLength, max)\n\n  for (let i = 0; i < length; i++) {\n    const prevChar = prev.charAt(prevLength - i - 1)\n    const nextChar = next.charAt(nextLength - i - 1)\n    if (prevChar !== nextChar) return i\n  }\n\n  if (prev.length !== next.length) return length\n  return null\n}\n\n/**\n * Takes two strings and returns an object representing two offsets. The\n * first, `start` represents the number of characters that are the same at\n * the front of the String. The `end` represents the number of characters\n * that are the same at the end of the String.\n *\n * Returns null if they are identical.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @returns the difference text range; null if there are no differences.\n */\nfunction getDiffOffsets(prev: string, next: string): TextRange | null {\n  if (prev === next) return null\n  const start = getDiffStart(prev, next)\n  if (start === null) return null\n  const maxEnd = Math.min(prev.length - start, next.length - start)\n  const end = getDiffEnd(prev, next, maxEnd)!\n  if (end === null) return null\n  return { start, end }\n}\n\n/**\n * Takes a text string and returns a slice from the string at the given text range\n *\n * @param text  the text\n * @param offsets  the text range\n * @returns the text slice at text range\n */\nfunction sliceText(text: string, offsets: TextRange): string {\n  return text.slice(offsets.start, text.length - offsets.end)\n}\n\n/**\n * Takes two strings and returns a smart diff that can be used to describe the\n * change in a way that can be used as operations like inserting, removing or\n * replacing text.\n *\n * @param prev the previous text\n * @param next the next text\n * @returns the text difference\n */\nexport function diffText(prev?: string, next?: string): Diff | null {\n  if (prev === undefined || next === undefined) return null\n  const offsets = getDiffOffsets(prev, next)\n  if (offsets == null) return null\n  const insertText = sliceText(next, offsets)\n  const removeText = sliceText(prev, offsets)\n  return {\n    start: offsets.start,\n    end: prev.length - offsets.end,\n    insertText,\n    removeText,\n  }\n}\n\nexport function combineInsertedText(insertedText: TextInsertion[]): string {\n  return insertedText.reduce((acc, { text }) => `${acc}${text.insertText}`, '')\n}\n\nexport function getTextInsertion<T extends Editor>(\n  editor: T,\n  domNode: DOMNode\n): TextInsertion | undefined {\n  const node = ReactEditor.toSlateNode(editor, domNode)\n\n  if (!Text.isText(node)) {\n    return undefined\n  }\n\n  const prevText = node.text\n  let nextText = domNode.textContent!\n\n  // textContent will pad an extra \\n when the textContent ends with an \\n\n  if (nextText.endsWith('\\n')) {\n    nextText = nextText.slice(0, nextText.length - 1)\n  }\n\n  // If the text is no different, there is no diff.\n  if (nextText !== prevText) {\n    const textDiff = diffText(prevText, nextText)\n    if (textDiff !== null) {\n      const textPath = ReactEditor.findPath(editor, node)\n\n      return {\n        text: textDiff,\n        path: textPath,\n      }\n    }\n  }\n\n  return undefined\n}\n\nexport function normalizeTextInsertionRange(\n  editor: Editor,\n  range: Range | null,\n  { path, text }: TextInsertion\n) {\n  const insertionRange = {\n    anchor: { path, offset: text.start },\n    focus: { path, offset: text.end },\n  }\n\n  if (!range || !Range.isCollapsed(range)) {\n    return insertionRange\n  }\n\n  const { insertText, removeText } = text\n  const isSingleCharacterInsertion =\n    insertText.length === 1 || removeText.length === 1\n\n  /**\n   * This code handles edge cases that arise from text diffing when the\n   * inserted or removed character is a single character, and the character\n   * right before or after the anchor is the same as the one being inserted or\n   * removed.\n   *\n   * Take this example: hello|o\n   *\n   * If another `o` is inserted at the selection's anchor in the example above,\n   * it should be inserted at the anchor, but using text diffing, we actually\n   * detect that the character was inserted after the second `o`:\n   *\n   * helloo[o]|\n   *\n   * Instead, in these very specific edge cases, we assume that the character\n   * needs to be inserted after the anchor rather than where the diff was found:\n   *\n   * hello[o]|o\n   */\n  if (isSingleCharacterInsertion && Path.equals(range.anchor.path, path)) {\n    const [text] = Array.from(\n      Editor.nodes(editor, { at: range, match: Text.isText })\n    )\n\n    if (text) {\n      const [node] = text\n      const { anchor } = range\n      const characterBeforeAnchor = node.text[anchor.offset - 1]\n      const characterAfterAnchor = node.text[anchor.offset]\n\n      if (insertText.length === 1 && insertText === characterAfterAnchor) {\n        // Assume text should be inserted at the anchor\n        return range\n      }\n\n      if (removeText.length === 1 && removeText === characterBeforeAnchor) {\n        // Assume text should be removed right before the anchor\n        return {\n          anchor: { path, offset: anchor.offset - 1 },\n          focus: { path, offset: anchor.offset },\n        }\n      }\n    }\n  }\n\n  return insertionRange\n}\n","import { ReactEditor } from '../..'\nimport { EDITOR_TO_RESTORE_DOM } from '../../utils/weak-maps'\n\nexport function restoreDOM(editor: ReactEditor) {\n  try {\n    const onRestoreDOM = EDITOR_TO_RESTORE_DOM.get(editor)\n    if (onRestoreDOM) {\n      onRestoreDOM()\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err)\n  }\n}\n","import { ReactEditor } from '../../plugin/react-editor'\nimport { Editor, Range, Transforms } from 'slate'\n\nimport { DOMNode } from '../../utils/dom'\n\nimport {\n  normalizeTextInsertionRange,\n  combineInsertedText,\n  TextInsertion,\n} from './diff-text'\nimport {\n  gatherMutationData,\n  isDeletion,\n  isLineBreak,\n  isRemoveLeafNodes,\n  isReplaceExpandedSelection,\n  isTextInsertion,\n} from './mutation-detection'\nimport { restoreDOM } from './restore-dom'\n\n// Replace with `const debug = console.log` to debug\nconst debug = (...message: any[]) => {}\n\n/**\n * Based loosely on:\n *\n * https://github.com/facebook/draft-js/blob/master/src/component/handlers/composition/DOMObserver.js\n * https://github.com/ProseMirror/prosemirror-view/blob/master/src/domobserver.js\n *\n * The input manager attempts to map observed mutations on the document to a\n * set of operations in order to reconcile Slate's internal value with the DOM.\n *\n * Mutations are processed synchronously as they come in. Only mutations that occur\n * during a user input loop are processed, as other mutations can occur within the\n * document that were not initiated by user input.\n *\n * The mutation reconciliation process attempts to match mutations to the following\n * patterns:\n *\n * - Text updates\n * - Deletions\n * - Line breaks\n *\n * @param editor\n */\n\nexport class AndroidInputManager {\n  constructor(private editor: ReactEditor) {\n    this.editor = editor\n  }\n\n  /**\n   * Handle MutationObserver flush\n   *\n   * @param mutations\n   */\n\n  flush = (mutations: MutationRecord[]) => {\n    debug('flush')\n\n    try {\n      this.reconcileMutations(mutations)\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err)\n\n      // Failed to reconcile mutations, restore DOM to its previous state\n      restoreDOM(this.editor)\n    }\n  }\n\n  /**\n   * Reconcile a batch of mutations\n   *\n   * @param mutations\n   */\n\n  private reconcileMutations = (mutations: MutationRecord[]) => {\n    const mutationData = gatherMutationData(this.editor, mutations)\n    const { insertedText, removedNodes } = mutationData\n\n    debug('processMutations', mutations, mutationData)\n\n    if (isReplaceExpandedSelection(this.editor, mutationData)) {\n      const text = combineInsertedText(insertedText)\n      this.replaceExpandedSelection(text)\n    } else if (isLineBreak(this.editor, mutationData)) {\n      this.insertBreak()\n    } else if (isRemoveLeafNodes(this.editor, mutationData)) {\n      this.removeLeafNodes(removedNodes)\n    } else if (isDeletion(this.editor, mutationData)) {\n      this.deleteBackward()\n    } else if (isTextInsertion(this.editor, mutationData)) {\n      this.insertText(insertedText)\n    }\n  }\n\n  /**\n   * Apply text diff\n   */\n\n  private insertText = (insertedText: TextInsertion[]) => {\n    debug('insertText')\n\n    const { selection } = this.editor\n\n    // Insert the batched text diffs\n    insertedText.forEach(insertion => {\n      Transforms.insertText(this.editor, insertion.text.insertText, {\n        at: normalizeTextInsertionRange(this.editor, selection, insertion),\n      })\n    })\n  }\n\n  /**\n   * Handle line breaks\n   */\n\n  private insertBreak = () => {\n    debug('insertBreak')\n\n    const { selection } = this.editor\n\n    Editor.insertBreak(this.editor)\n\n    // To-do: Need a more granular solution to restoring only a specific portion\n    // of the document. Restoring the entire document is expensive.\n    restoreDOM(this.editor)\n\n    if (selection) {\n      // Compat: Move selection to the newly inserted block if it has not moved\n      setTimeout(() => {\n        if (\n          this.editor.selection &&\n          Range.equals(selection, this.editor.selection)\n        ) {\n          Transforms.move(this.editor)\n        }\n      }, 100)\n    }\n  }\n\n  /**\n   * Handle expanded selection being deleted or replaced by text\n   */\n\n  private replaceExpandedSelection = (text: string) => {\n    debug('replaceExpandedSelection')\n\n    // Delete expanded selection\n    Editor.deleteFragment(this.editor)\n\n    if (text.length) {\n      // Selection was replaced by text, insert the entire text diff\n      Editor.insertText(this.editor, text)\n    }\n\n    restoreDOM(this.editor)\n  }\n\n  /**\n   * Handle `backspace` that merges blocks\n   */\n\n  private deleteBackward = () => {\n    debug('deleteBackward')\n\n    Editor.deleteBackward(this.editor)\n    ReactEditor.focus(this.editor)\n\n    restoreDOM(this.editor)\n  }\n\n  /**\n   * Handle mutations that remove specific leaves\n   */\n  private removeLeafNodes = (nodes: DOMNode[]) => {\n    for (const node of nodes) {\n      const slateNode = ReactEditor.toSlateNode(this.editor, node)\n\n      if (slateNode) {\n        const path = ReactEditor.findPath(this.editor, slateNode)\n\n        Transforms.delete(this.editor, { at: path })\n        restoreDOM(this.editor)\n      }\n    }\n  }\n}\n\nexport default AndroidInputManager\n","import { Editor, Node, Path, Range } from 'slate'\n\nimport { DOMNode } from '../../utils/dom'\nimport { ReactEditor } from '../..'\nimport { TextInsertion, getTextInsertion } from './diff-text'\n\ninterface MutationData {\n  addedNodes: DOMNode[]\n  removedNodes: DOMNode[]\n  insertedText: TextInsertion[]\n  characterDataMutations: MutationRecord[]\n}\n\ntype MutationDetection = (editor: Editor, mutationData: MutationData) => boolean\n\nexport function gatherMutationData(\n  editor: Editor,\n  mutations: MutationRecord[]\n): MutationData {\n  const addedNodes: DOMNode[] = []\n  const removedNodes: DOMNode[] = []\n  const insertedText: TextInsertion[] = []\n  const characterDataMutations: MutationRecord[] = []\n\n  mutations.forEach(mutation => {\n    switch (mutation.type) {\n      case 'childList': {\n        if (mutation.addedNodes.length) {\n          mutation.addedNodes.forEach(addedNode => {\n            addedNodes.push(addedNode)\n          })\n        }\n\n        mutation.removedNodes.forEach(removedNode => {\n          removedNodes.push(removedNode)\n        })\n\n        break\n      }\n      case 'characterData': {\n        characterDataMutations.push(mutation)\n\n        // Changes to text nodes should consider the parent element\n        const { parentNode } = mutation.target\n\n        if (!parentNode) {\n          return\n        }\n\n        const textInsertion = getTextInsertion(editor, parentNode)\n\n        if (!textInsertion) {\n          return\n        }\n\n        // If we've already detected a diff at that path, we can return early\n        if (\n          insertedText.some(({ path }) => Path.equals(path, textInsertion.path))\n        ) {\n          return\n        }\n\n        // Add the text diff to the array of detected text insertions that need to be reconciled\n        insertedText.push(textInsertion)\n      }\n    }\n  })\n\n  return { addedNodes, removedNodes, insertedText, characterDataMutations }\n}\n\n/**\n * In general, when a line break occurs, there will be more `addedNodes` than `removedNodes`.\n *\n * This isn't always the case however. In some cases, there will be more `removedNodes` than\n * `addedNodes`.\n *\n * To account for these edge cases, the most reliable strategy to detect line break mutations\n * is to check whether a new block was inserted of the same type as the current block.\n */\nexport const isLineBreak: MutationDetection = (editor, { addedNodes }) => {\n  const { selection } = editor\n  const parentNode = selection\n    ? Node.parent(editor, selection.anchor.path)\n    : null\n  const parentDOMNode = parentNode\n    ? ReactEditor.toDOMNode(editor, parentNode)\n    : null\n\n  if (!parentDOMNode) {\n    return false\n  }\n\n  return addedNodes.some(\n    addedNode =>\n      addedNode instanceof HTMLElement &&\n      addedNode.tagName === parentDOMNode?.tagName\n  )\n}\n\n/**\n * So long as we check for line break mutations before deletion mutations,\n * we can safely assume that a set of mutations was a deletion if there are\n * removed nodes.\n */\nexport const isDeletion: MutationDetection = (_, { removedNodes }) => {\n  return removedNodes.length > 0\n}\n\n/**\n * If the selection was expanded and there are removed nodes,\n * the contents of the selection need to be replaced with the diff\n */\nexport const isReplaceExpandedSelection: MutationDetection = (\n  { selection },\n  { removedNodes }\n) => {\n  return selection\n    ? Range.isExpanded(selection) && removedNodes.length > 0\n    : false\n}\n\n/**\n * Plain text insertion\n */\nexport const isTextInsertion: MutationDetection = (_, { insertedText }) => {\n  return insertedText.length > 0\n}\n\n/**\n * Edge case. Detect mutations that remove leaf nodes and also update character data\n */\nexport const isRemoveLeafNodes: MutationDetection = (\n  _,\n  { addedNodes, characterDataMutations, removedNodes }\n) => {\n  return (\n    removedNodes.length > 0 &&\n    addedNodes.length === 0 &&\n    characterDataMutations.length > 0\n  )\n}\n","import { RefObject, useCallback, useRef, useState } from 'react'\n\nimport { useSlateStatic } from '../../hooks/use-slate-static'\n\nimport { AndroidInputManager } from './android-input-manager'\nimport { useMutationObserver } from './use-mutation-observer'\nimport { useTrackUserInput } from './use-track-user-input'\n\nconst MUTATION_OBSERVER_CONFIG: MutationObserverInit = {\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true,\n  subtree: true,\n}\n\nexport function useAndroidInputManager(node: RefObject<HTMLElement>) {\n  const editor = useSlateStatic()\n  const [inputManager] = useState(() => new AndroidInputManager(editor))\n  const { receivedUserInput, onUserInput } = useTrackUserInput()\n  const timeoutId = useRef<ReturnType<typeof setTimeout> | null>(null)\n  const isReconciling = useRef(false)\n  const flush = useCallback((mutations: MutationRecord[]) => {\n    if (!receivedUserInput.current) {\n      return\n    }\n\n    isReconciling.current = true\n    inputManager.flush(mutations)\n\n    if (timeoutId.current) {\n      clearTimeout(timeoutId.current)\n    }\n\n    timeoutId.current = setTimeout(() => {\n      isReconciling.current = false\n      timeoutId.current = null\n    }, 250)\n  }, [])\n\n  useMutationObserver(node, flush, MUTATION_OBSERVER_CONFIG)\n\n  return {\n    isReconciling,\n    onUserInput,\n  }\n}\n","import { useCallback, useEffect, useRef } from 'react'\n\nimport { ReactEditor } from '../..'\nimport { useSlateStatic } from '../../hooks/use-slate-static'\n\nexport function useTrackUserInput() {\n  const editor = useSlateStatic()\n  const receivedUserInput = useRef<boolean>(false)\n  const animationFrameRef = useRef<number | null>(null)\n  const onUserInput = useCallback(() => {\n    if (receivedUserInput.current === false) {\n      const window = ReactEditor.getWindow(editor)\n\n      receivedUserInput.current = true\n\n      if (animationFrameRef.current) {\n        window.cancelAnimationFrame(animationFrameRef.current)\n      }\n\n      animationFrameRef.current = window.requestAnimationFrame(() => {\n        receivedUserInput.current = false\n        animationFrameRef.current = null\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    // Reset user input tracking on every render\n    if (receivedUserInput.current) {\n      receivedUserInput.current = false\n    }\n  })\n\n  return {\n    receivedUserInput,\n    onUserInput,\n  }\n}\n","import { RefObject, useEffect, useState } from 'react'\nimport { useIsomorphicLayoutEffect } from '../../hooks/use-isomorphic-layout-effect'\n\nexport function useMutationObserver(\n  node: RefObject<HTMLElement>,\n  callback: MutationCallback,\n  options: MutationObserverInit\n) {\n  const [mutationObserver] = useState(() => new MutationObserver(callback))\n\n  useIsomorphicLayoutEffect(() => {\n    // Disconnect mutation observer during render phase\n    mutationObserver.disconnect()\n  })\n\n  useEffect(() => {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined')\n    }\n\n    // Attach mutation observer after render phase has finished\n    mutationObserver.observe(node.current, options)\n\n    // Clean up after effect\n    return mutationObserver.disconnect.bind(mutationObserver)\n  })\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `focused` state of the editor.\n */\n\nexport const FocusedContext = createContext(false)\n\n/**\n * Get the current `focused` state of the editor.\n */\n\nexport const useFocused = (): boolean => {\n  return useContext(FocusedContext)\n}\n","import React, { useMemo, useState, useCallback, useEffect } from 'react'\nimport { Editor, Node, Element, Descendant } from 'slate'\nimport invariant from 'tiny-invariant'\n\nimport { ReactEditor } from '../plugin/react-editor'\nimport { FocusedContext } from '../hooks/use-focused'\nimport { EditorContext } from '../hooks/use-slate-static'\nimport { SlateContext } from '../hooks/use-slate'\nimport { EDITOR_TO_ON_CHANGE } from '../utils/weak-maps'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\n\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */\n\nexport const Slate = (props: {\n  editor: ReactEditor\n  value: Descendant[]\n  children: React.ReactNode\n  onChange: (value: Descendant[]) => void\n}) => {\n  const { editor, children, onChange, value, ...rest } = props\n  const [key, setKey] = useState(0)\n  const context: [ReactEditor] = useMemo(() => {\n    invariant(\n      Node.isNodeList(value),\n      `[Slate] value is invalid! Expected a list of elements but got: ${JSON.stringify(\n        value\n      )}`\n    )\n    invariant(\n      Editor.isEditor(editor),\n      `[Slate] editor is invalid! you passed: ${JSON.stringify(editor)}`\n    )\n\n    editor.children = value\n    Object.assign(editor, rest)\n    return [editor]\n  }, [key, value, ...Object.values(rest)])\n\n  const onContextChange = useCallback(() => {\n    onChange(editor.children)\n    setKey(key + 1)\n  }, [key, onChange])\n\n  EDITOR_TO_ON_CHANGE.set(editor, onContextChange)\n\n  useEffect(() => {\n    return () => {\n      EDITOR_TO_ON_CHANGE.set(editor, () => {})\n    }\n  }, [])\n\n  const [isFocused, setIsFocused] = useState(ReactEditor.isFocused(editor))\n\n  useEffect(() => {\n    setIsFocused(ReactEditor.isFocused(editor))\n  })\n\n  useIsomorphicLayoutEffect(() => {\n    const fn = () => setIsFocused(ReactEditor.isFocused(editor))\n    document.addEventListener('focus', fn, true)\n    return () => document.removeEventListener('focus', fn, true)\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    const fn = () => setIsFocused(ReactEditor.isFocused(editor))\n    document.addEventListener('blur', fn, true)\n    return () => document.removeEventListener('blur', fn, true)\n  }, [])\n\n  return (\n    <SlateContext.Provider value={context}>\n      <EditorContext.Provider value={editor}>\n        <FocusedContext.Provider value={isFocused}>\n          {children}\n        </FocusedContext.Provider>\n      </EditorContext.Provider>\n    </SlateContext.Provider>\n  )\n}\n","/**\n * Utilities for single-line deletion\n */\n\nimport { Range, Editor } from 'slate'\nimport { ReactEditor } from '..'\n\nconst doRectsIntersect = (rect: DOMRect, compareRect: DOMRect) => {\n  const middle = (compareRect.top + compareRect.bottom) / 2\n\n  return rect.top <= middle && rect.bottom >= middle\n}\n\nconst areRangesSameLine = (\n  editor: ReactEditor,\n  range1: Range,\n  range2: Range\n) => {\n  const rect1 = ReactEditor.toDOMRange(editor, range1).getBoundingClientRect()\n  const rect2 = ReactEditor.toDOMRange(editor, range2).getBoundingClientRect()\n\n  return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1)\n}\n\n/**\n * A helper utility that returns the end portion of a `Range`\n * which is located on a single line.\n *\n * @param {Editor} editor The editor object to compare against\n * @param {Range} parentRange The parent range to compare against\n * @returns {Range} A valid portion of the parentRange which is one a single line\n */\nexport const findCurrentLineRange = (\n  editor: ReactEditor,\n  parentRange: Range\n): Range => {\n  const parentRangeBoundary = Editor.range(editor, Range.end(parentRange))\n  const positions = Array.from(Editor.positions(editor, { at: parentRange }))\n\n  let left = 0\n  let right = positions.length\n  let middle = Math.floor(right / 2)\n\n  if (\n    areRangesSameLine(\n      editor,\n      Editor.range(editor, positions[left]),\n      parentRangeBoundary\n    )\n  ) {\n    return Editor.range(editor, positions[left], parentRangeBoundary)\n  }\n\n  if (positions.length < 2) {\n    return Editor.range(\n      editor,\n      positions[positions.length - 1],\n      parentRangeBoundary\n    )\n  }\n\n  while (middle !== positions.length && middle !== left) {\n    if (\n      areRangesSameLine(\n        editor,\n        Editor.range(editor, positions[middle]),\n        parentRangeBoundary\n      )\n    ) {\n      right = middle\n    } else {\n      left = middle\n    }\n\n    middle = Math.floor((left + right) / 2)\n  }\n\n  return Editor.range(editor, positions[right], parentRangeBoundary)\n}\n","import ReactDOM from 'react-dom'\nimport { Editor, Node, Path, Operation, Transforms, Range } from 'slate'\n\nimport { ReactEditor } from './react-editor'\nimport { Key } from '../utils/key'\nimport { EDITOR_TO_ON_CHANGE, NODE_TO_KEY } from '../utils/weak-maps'\nimport { isDOMText, getPlainText } from '../utils/dom'\nimport { findCurrentLineRange } from '../utils/lines'\n\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\n\nexport const withReact = <T extends Editor>(editor: T) => {\n  const e = editor as T & ReactEditor\n  const { apply, onChange, deleteBackward } = e\n\n  e.deleteBackward = unit => {\n    if (unit !== 'line') {\n      return deleteBackward(unit)\n    }\n\n    if (editor.selection && Range.isCollapsed(editor.selection)) {\n      const parentBlockEntry = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: editor.selection,\n      })\n\n      if (parentBlockEntry) {\n        const [, parentBlockPath] = parentBlockEntry\n        const parentElementRange = Editor.range(\n          editor,\n          parentBlockPath,\n          editor.selection.anchor\n        )\n\n        const currentLineRange = findCurrentLineRange(e, parentElementRange)\n\n        if (!Range.isCollapsed(currentLineRange)) {\n          Transforms.delete(editor, { at: currentLineRange })\n        }\n      }\n    }\n  }\n\n  e.apply = (op: Operation) => {\n    const matches: [Path, Key][] = []\n\n    switch (op.type) {\n      case 'insert_text':\n      case 'remove_text':\n      case 'set_node': {\n        for (const [node, path] of Editor.levels(e, { at: op.path })) {\n          const key = ReactEditor.findKey(e, node)\n          matches.push([path, key])\n        }\n\n        break\n      }\n\n      case 'insert_node':\n      case 'remove_node':\n      case 'merge_node':\n      case 'split_node': {\n        for (const [node, path] of Editor.levels(e, {\n          at: Path.parent(op.path),\n        })) {\n          const key = ReactEditor.findKey(e, node)\n          matches.push([path, key])\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        for (const [node, path] of Editor.levels(e, {\n          at: Path.common(Path.parent(op.path), Path.parent(op.newPath)),\n        })) {\n          const key = ReactEditor.findKey(e, node)\n          matches.push([path, key])\n        }\n        break\n      }\n    }\n\n    apply(op)\n\n    for (const [path, key] of matches) {\n      const [node] = Editor.node(e, path)\n      NODE_TO_KEY.set(node, key)\n    }\n  }\n\n  e.setFragmentData = (data: Pick<DataTransfer, 'getData' | 'setData'>) => {\n    const { selection } = e\n\n    if (!selection) {\n      return\n    }\n\n    const [start, end] = Range.edges(selection)\n    const startVoid = Editor.void(e, { at: start.path })\n    const endVoid = Editor.void(e, { at: end.path })\n\n    if (Range.isCollapsed(selection) && !startVoid) {\n      return\n    }\n\n    // Create a fake selection so that we can add a Base64-encoded copy of the\n    // fragment to the HTML, to decode on future pastes.\n    const domRange = ReactEditor.toDOMRange(e, selection)\n    let contents = domRange.cloneContents()\n    let attach = contents.childNodes[0] as HTMLElement\n\n    // Make sure attach is non-empty, since empty nodes will not get copied.\n    contents.childNodes.forEach(node => {\n      if (node.textContent && node.textContent.trim() !== '') {\n        attach = node as HTMLElement\n      }\n    })\n\n    // COMPAT: If the end node is a void node, we need to move the end of the\n    // range from the void node's spacer span, to the end of the void node's\n    // content, since the spacer is before void's content in the DOM.\n    if (endVoid) {\n      const [voidNode] = endVoid\n      const r = domRange.cloneRange()\n      const domNode = ReactEditor.toDOMNode(e, voidNode)\n      r.setEndAfter(domNode)\n      contents = r.cloneContents()\n    }\n\n    // COMPAT: If the start node is a void node, we need to attach the encoded\n    // fragment to the void node's content node instead of the spacer, because\n    // attaching it to empty `<div>/<span>` nodes will end up having it erased by\n    // most browsers. (2018/04/27)\n    if (startVoid) {\n      attach = contents.querySelector('[data-slate-spacer]')! as HTMLElement\n    }\n\n    // Remove any zero-width space spans from the cloned DOM so that they don't\n    // show up elsewhere when pasted.\n    Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n      zw => {\n        const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n        zw.textContent = isNewline ? '\\n' : ''\n      }\n    )\n\n    // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up\n    // in the HTML, and can be used for intra-Slate pasting. If it's a text\n    // node, wrap it in a `<span>` so we have something to set an attribute on.\n    if (isDOMText(attach)) {\n      const span = document.createElement('span')\n      // COMPAT: In Chrome and Safari, if we don't add the `white-space` style\n      // then leading and trailing spaces will be ignored. (2017/09/21)\n      span.style.whiteSpace = 'pre'\n      span.appendChild(attach)\n      contents.appendChild(span)\n      attach = span\n    }\n\n    const fragment = e.getFragment()\n    const string = JSON.stringify(fragment)\n    const encoded = window.btoa(encodeURIComponent(string))\n    attach.setAttribute('data-slate-fragment', encoded)\n    data.setData('application/x-slate-fragment', encoded)\n\n    // Add the content to a <div> so that we can get its inner HTML.\n    const div = document.createElement('div')\n    div.appendChild(contents)\n    div.setAttribute('hidden', 'true')\n    document.body.appendChild(div)\n    data.setData('text/html', div.innerHTML)\n    data.setData('text/plain', getPlainText(div))\n    document.body.removeChild(div)\n    return data\n  }\n\n  e.insertData = (data: DataTransfer) => {\n    const fragment = data.getData('application/x-slate-fragment')\n\n    if (fragment) {\n      const decoded = decodeURIComponent(window.atob(fragment))\n      const parsed = JSON.parse(decoded) as Node[]\n      e.insertFragment(parsed)\n      return\n    }\n\n    const text = data.getData('text/plain')\n\n    if (text) {\n      const lines = text.split(/\\r\\n|\\r|\\n/)\n      let split = false\n\n      for (const line of lines) {\n        if (split) {\n          Transforms.splitNodes(e, { always: true })\n        }\n\n        e.insertText(line)\n        split = true\n      }\n    }\n  }\n\n  e.onChange = () => {\n    // COMPAT: React doesn't batch `setState` hook calls, which means that the\n    // children and selection can get out of sync for one render pass. So we\n    // have to use this unstable API to ensure it batches them. (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    ReactDOM.unstable_batchedUpdates(() => {\n      const onContextChange = EDITOR_TO_ON_CHANGE.get(e)\n\n      if (onContextChange) {\n        onContextChange()\n      }\n\n      onChange()\n    })\n  }\n\n  return e\n}\n","// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n// add support for visualViewport object currently implemented in chrome\ninterface visualViewport {\n  height: number\n  width: number\n}\n\ntype ScrollLogicalPosition = 'start' | 'center' | 'end' | 'nearest'\n// This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\ntype ScrollMode = 'always' | 'if-needed'\n// New option that skips auto-scrolling all nodes with overflow: hidden set\n// See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\ntype SkipOverflowHiddenElements = boolean\n\ninterface Options {\n  block?: ScrollLogicalPosition\n  inline?: ScrollLogicalPosition\n  scrollMode?: ScrollMode\n  boundary?: CustomScrollBoundary\n  skipOverflowHiddenElements?: SkipOverflowHiddenElements\n}\n\n// Custom behavior, not in any spec\ntype CustomScrollBoundaryCallback = (parent: Element) => boolean\ntype CustomScrollBoundary = Element | CustomScrollBoundaryCallback | null\ninterface CustomScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nfunction isElement(el: any): el is Element {\n  return typeof el === 'object' && el != null && el.nodeType === 1\n}\n\nfunction canOverflow(\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nfunction getFrameElement(el: Element) {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nfunction isHiddenByFrame(el: Element): boolean {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nfunction isScrollable(el: Element, skipOverflowHiddenElements?: boolean) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nfunction alignNearest(\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nexport default (target: Element, options: Options): CustomScrollAction[] => {\n  //TODO: remove this hack when microbundle will support typescript >= 4.0\n  const windowWithViewport = (window as unknown) as Window & {\n    visualViewport: visualViewport\n  }\n\n  const {\n    scrollMode,\n    block,\n    inline,\n    boundary,\n    skipOverflowHiddenElements,\n  } = options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = cursor.parentElement\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.width\n    : innerWidth\n  const viewportHeight = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.height\n    : innerHeight\n\n  // Newer browsers supports scroll[X|Y], page[X|Y]Offset is\n  const viewportX = window.scrollX || pageXOffset\n  const viewportY = window.scrollY || pageYOffset\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop\n      : block === 'end'\n      ? targetBottom\n      : targetTop + targetHeight / 2 // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2\n      : inline === 'end'\n      ? targetRight\n      : targetLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: CustomScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const {\n      height,\n      width,\n      top,\n      right,\n      bottom,\n      left,\n    } = frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          viewportY,\n          viewportY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          viewportY + targetBlock,\n          viewportY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          viewportX,\n          viewportX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          viewportX + targetInline,\n          viewportX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + viewportY)\n      inlineScroll = Math.max(0, inlineScroll + viewportX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll = Math.max(\n        0,\n        Math.min(\n          scrollTop + blockScroll,\n          frame.scrollHeight - height + scrollbarHeight\n        )\n      )\n      inlineScroll = Math.max(\n        0,\n        Math.min(\n          scrollLeft + inlineScroll,\n          frame.scrollWidth - width + scrollbarWidth\n        )\n      )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Descendant, Editor, Element, Node, Range, Transforms } from 'slate'\nimport throttle from 'lodash/throttle'\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nimport { DefaultPlaceholder, ReactEditor } from '../..'\nimport { ReadOnlyContext } from '../../hooks/use-read-only'\nimport { useSlate } from '../../hooks/use-slate'\nimport { useIsomorphicLayoutEffect } from '../../hooks/use-isomorphic-layout-effect'\nimport { DecorateContext } from '../../hooks/use-decorate'\nimport {\n  DOMElement,\n  isDOMElement,\n  isDOMNode,\n  getDefaultView,\n  isPlainTextOnlyPaste,\n} from '../../utils/dom'\nimport {\n  EDITOR_TO_ELEMENT,\n  EDITOR_TO_RESTORE_DOM,\n  EDITOR_TO_WINDOW,\n  ELEMENT_TO_NODE,\n  IS_FOCUSED,\n  IS_READ_ONLY,\n  NODE_TO_ELEMENT,\n  PLACEHOLDER_SYMBOL,\n} from '../../utils/weak-maps'\nimport { EditableProps } from '../editable'\nimport useChildren from '../../hooks/use-children'\nimport {\n  defaultDecorate,\n  hasEditableTarget,\n  isEventHandled,\n  isDOMEventHandled,\n  isTargetInsideVoid,\n} from '../editable'\n\nimport { useAndroidInputManager } from './use-android-input-manager'\n\n/**\n * Editable.\n */\n\nexport const AndroidEditable = (props: EditableProps): JSX.Element => {\n  const {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    renderPlaceholder = props => <DefaultPlaceholder {...props} />,\n    style = {},\n    as: Component = 'div',\n    ...attributes\n  } = props\n  const editor = useSlate()\n  const ref = useRef<HTMLDivElement>(null)\n  const inputManager = useAndroidInputManager(ref)\n\n  // Update internal state on each render.\n  IS_READ_ONLY.set(editor, readOnly)\n\n  // Keep track of some state for the event handler logic.\n  const state = useMemo(\n    () => ({\n      isUpdatingSelection: false,\n      latestElement: null as DOMElement | null,\n    }),\n    []\n  )\n\n  const [contentKey, setContentKey] = useState(0)\n  const onRestoreDOM = useCallback(() => {\n    setContentKey(prev => prev + 1)\n  }, [contentKey])\n\n  // Whenever the editor updates...\n  useIsomorphicLayoutEffect(() => {\n    // Update element-related weak maps with the DOM element ref.\n    let window\n\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window)\n      EDITOR_TO_ELEMENT.set(editor, ref.current)\n      NODE_TO_ELEMENT.set(editor, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, editor)\n      EDITOR_TO_RESTORE_DOM.set(editor, onRestoreDOM)\n    } else {\n      NODE_TO_ELEMENT.delete(editor)\n      EDITOR_TO_RESTORE_DOM.delete(editor)\n    }\n\n    try {\n      // Make sure the DOM selection state is in sync.\n      const { selection } = editor\n      const root = ReactEditor.findDocumentOrShadowRoot(editor)\n      const domSelection = root.getSelection()\n\n      if (!domSelection || !ReactEditor.isFocused(editor)) {\n        return\n      }\n\n      const hasDomSelection = domSelection.type !== 'None'\n\n      // If the DOM selection is properly unset, we're done.\n      if (!selection && !hasDomSelection) {\n        return\n      }\n\n      // verify that the dom selection is in the editor\n      const editorElement = EDITOR_TO_ELEMENT.get(editor)!\n      let hasDomSelectionInEditor = false\n      if (\n        editorElement.contains(domSelection.anchorNode) &&\n        editorElement.contains(domSelection.focusNode)\n      ) {\n        hasDomSelectionInEditor = true\n      }\n\n      // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n      if (hasDomSelection && hasDomSelectionInEditor && selection) {\n        const slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: true,\n        })\n        if (slateRange && Range.equals(slateRange, selection)) {\n          return\n        }\n      }\n\n      // when <Editable/> is being controlled through external value\n      // then its children might just change - DOM responds to it on its own\n      // but Slate's value is not being updated through any operation\n      // and thus it doesn't transform selection on its own\n      if (selection && !ReactEditor.hasRange(editor, selection)) {\n        editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n        })\n        return\n      }\n\n      // Otherwise the DOM selection is out of sync, so update it.\n      const el = ReactEditor.toDOMNode(editor, editor)\n      state.isUpdatingSelection = true\n\n      const newDomRange = selection && ReactEditor.toDOMRange(editor, selection)\n\n      if (newDomRange) {\n        if (Range.isBackward(selection!)) {\n          domSelection.setBaseAndExtent(\n            newDomRange.endContainer,\n            newDomRange.endOffset,\n            newDomRange.startContainer,\n            newDomRange.startOffset\n          )\n        } else {\n          domSelection.setBaseAndExtent(\n            newDomRange.startContainer,\n            newDomRange.startOffset,\n            newDomRange.endContainer,\n            newDomRange.endOffset\n          )\n        }\n        const leafEl = newDomRange.startContainer.parentElement!\n        leafEl.getBoundingClientRect = newDomRange.getBoundingClientRect.bind(\n          newDomRange\n        )\n        scrollIntoView(leafEl, {\n          scrollMode: 'if-needed',\n          boundary: el,\n        })\n        // @ts-ignore\n        delete leafEl.getBoundingClientRect\n      } else {\n        domSelection.removeAllRanges()\n      }\n\n      setTimeout(() => {\n        state.isUpdatingSelection = false\n      })\n    } catch {\n      // Failed to update selection, likely due to reconciliation error\n      state.isUpdatingSelection = false\n    }\n  })\n\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus()\n    }\n  }, [autoFocus])\n\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  const onDOMBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (\n        !readOnly &&\n        hasEditableTarget(editor, event.target) &&\n        !isDOMEventHandled(event, propsOnDOMBeforeInput)\n      ) {\n        inputManager.onUserInput()\n      }\n    },\n    [readOnly, propsOnDOMBeforeInput]\n  )\n\n  // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  useIsomorphicLayoutEffect(() => {\n    const node = ref.current\n\n    // @ts-ignore The `beforeinput` event isn't recognized.\n    node?.addEventListener('beforeinput', onDOMBeforeInput)\n\n    // @ts-ignore The `beforeinput` event isn't recognized.\n    return () => node?.removeEventListener('beforeinput', onDOMBeforeInput)\n  }, [contentKey, propsOnDOMBeforeInput])\n\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  const onDOMSelectionChange = useCallback(\n    throttle(() => {\n      try {\n        if (\n          !readOnly &&\n          !state.isUpdatingSelection &&\n          !inputManager.isReconciling.current\n        ) {\n          const root = ReactEditor.findDocumentOrShadowRoot(editor)\n          const { activeElement } = root\n          const el = ReactEditor.toDOMNode(editor, editor)\n          const domSelection = root.getSelection()\n\n          if (activeElement === el) {\n            state.latestElement = activeElement\n            IS_FOCUSED.set(editor, true)\n          } else {\n            IS_FOCUSED.delete(editor)\n          }\n\n          if (!domSelection) {\n            return Transforms.deselect(editor)\n          }\n\n          const { anchorNode, focusNode } = domSelection\n\n          const anchorNodeSelectable =\n            hasEditableTarget(editor, anchorNode) ||\n            isTargetInsideVoid(editor, anchorNode)\n\n          const focusNodeSelectable =\n            hasEditableTarget(editor, focusNode) ||\n            isTargetInsideVoid(editor, focusNode)\n\n          if (anchorNodeSelectable && focusNodeSelectable) {\n            const range = ReactEditor.toSlateRange(editor, domSelection, {\n              exactMatch: false,\n            })\n            Transforms.select(editor, range)\n          } else {\n            Transforms.deselect(editor)\n          }\n        }\n      } catch {\n        // Failed to update selection, likely due to reconciliation error\n      }\n    }, 100),\n    [readOnly]\n  )\n\n  // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n  useIsomorphicLayoutEffect(() => {\n    const window = ReactEditor.getWindow(editor)\n    window.document.addEventListener('selectionchange', onDOMSelectionChange)\n\n    return () => {\n      window.document.removeEventListener(\n        'selectionchange',\n        onDOMSelectionChange\n      )\n    }\n  })\n\n  const decorations = decorate([editor, []])\n\n  if (\n    placeholder &&\n    editor.children.length === 1 &&\n    Array.from(Node.texts(editor)).length === 1 &&\n    Node.string(editor) === ''\n  ) {\n    const start = Editor.start(editor, [])\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start,\n    })\n  }\n\n  return (\n    <ReadOnlyContext.Provider value={readOnly}>\n      <DecorateContext.Provider value={decorate}>\n        <Component\n          key={contentKey}\n          role={readOnly ? undefined : 'textbox'}\n          {...attributes}\n          spellCheck={attributes.spellCheck}\n          autoCorrect={attributes.autoCorrect}\n          autoCapitalize={attributes.autoCapitalize}\n          data-slate-editor\n          data-slate-node=\"value\"\n          contentEditable={readOnly ? undefined : true}\n          suppressContentEditableWarning\n          ref={ref}\n          style={{\n            // Allow positioning relative to the editable element.\n            position: 'relative',\n            // Prevent the default outline styles.\n            outline: 'none',\n            // Preserve adjacent whitespace and new lines.\n            whiteSpace: 'pre-wrap',\n            // Allow words to break if they are too long.\n            wordWrap: 'break-word',\n            // Allow for passed-in styles to override anything.\n            ...style,\n          }}\n          onCopy={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCopy)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData)\n              }\n            },\n            [attributes.onCopy]\n          )}\n          onCut={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCut)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData)\n                const { selection } = editor\n\n                if (selection) {\n                  if (Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    const node = Node.parent(editor, selection.anchor.path)\n                    if (Editor.isVoid(editor, node)) {\n                      Transforms.delete(editor)\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onCut]\n          )}\n          onFocus={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                !state.isUpdatingSelection &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onFocus)\n              ) {\n                const root = ReactEditor.findDocumentOrShadowRoot(editor)\n                state.latestElement = root.activeElement\n\n                IS_FOCUSED.set(editor, true)\n              }\n            },\n            [readOnly, attributes.onFocus]\n          )}\n          onBlur={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                readOnly ||\n                state.isUpdatingSelection ||\n                !hasEditableTarget(editor, event.target) ||\n                isEventHandled(event, attributes.onBlur)\n              ) {\n                return\n              }\n\n              // COMPAT: If the current `activeElement` is still the previous\n              // one, this is due to the window being blurred when the tab\n              // itself becomes unfocused, so we want to abort early to allow to\n              // editor to stay focused when the tab becomes focused again.\n              const root = ReactEditor.findDocumentOrShadowRoot(editor)\n              if (state.latestElement === root.activeElement) {\n                return\n              }\n\n              const { relatedTarget } = event\n              const el = ReactEditor.toDOMNode(editor, editor)\n\n              // COMPAT: The event should be ignored if the focus is returning\n              // to the editor from an embedded editable element (eg. an <input>\n              // element inside a void node).\n              if (relatedTarget === el) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving from\n              // the editor to inside a void node's spacer element.\n              if (\n                isDOMElement(relatedTarget) &&\n                relatedTarget.hasAttribute('data-slate-spacer')\n              ) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving to a\n              // non- editable section of an element that isn't a void node (eg.\n              // a list item of the check list example).\n              if (\n                relatedTarget != null &&\n                isDOMNode(relatedTarget) &&\n                ReactEditor.hasDOMNode(editor, relatedTarget)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, relatedTarget)\n\n                if (Element.isElement(node) && !editor.isVoid(node)) {\n                  return\n                }\n              }\n\n              IS_FOCUSED.delete(editor)\n            },\n            [readOnly, attributes.onBlur]\n          )}\n          onPaste={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              // This unfortunately needs to be handled with paste events instead.\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onPaste) &&\n                !readOnly\n              ) {\n                event.preventDefault()\n                ReactEditor.insertData(editor, event.clipboardData)\n              }\n            },\n            [readOnly, attributes.onPaste]\n          )}\n        >\n          {useChildren({\n            decorations,\n            node: editor,\n            renderElement,\n            renderPlaceholder,\n            renderLeaf,\n            selection: editor.selection,\n          })}\n        </Component>\n      </DecorateContext.Provider>\n    </ReadOnlyContext.Provider>\n  )\n}\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * Constants.\n */\n\nvar IS_MAC = typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\nvar MODIFIERS = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey'\n};\n\nvar ALIASES = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta'\n};\n\nvar CODES = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  ' ': 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  '\\'': 222\n};\n\nfor (var f = 1; f < 20; f++) {\n  CODES['f' + f] = 111 + f;\n}\n\n/**\n * Is hotkey?\n */\n\nfunction isHotkey(hotkey, options, event) {\n  if (options && !('byKey' in options)) {\n    event = options;\n    options = null;\n  }\n\n  if (!Array.isArray(hotkey)) {\n    hotkey = [hotkey];\n  }\n\n  var array = hotkey.map(function (string) {\n    return parseHotkey(string, options);\n  });\n  var check = function check(e) {\n    return array.some(function (object) {\n      return compareHotkey(object, e);\n    });\n  };\n  var ret = event == null ? check : check(event);\n  return ret;\n}\n\nfunction isCodeHotkey(hotkey, event) {\n  return isHotkey(hotkey, event);\n}\n\nfunction isKeyHotkey(hotkey, event) {\n  return isHotkey(hotkey, { byKey: true }, event);\n}\n\n/**\n * Parse.\n */\n\nfunction parseHotkey(hotkey, options) {\n  var byKey = options && options.byKey;\n  var ret = {};\n\n  // Special case to handle the `+` key since we use it as a separator.\n  hotkey = hotkey.replace('++', '+add');\n  var values = hotkey.split('+');\n  var length = values.length;\n\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n\n  for (var k in MODIFIERS) {\n    ret[MODIFIERS[k]] = false;\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n\n      var optional = value.endsWith('?') && value.length > 1;\n\n      if (optional) {\n        value = value.slice(0, -1);\n      }\n\n      var name = toKeyName(value);\n      var modifier = MODIFIERS[name];\n\n      if (length === 1 || !modifier) {\n        if (byKey) {\n          ret.key = name;\n        } else {\n          ret.which = toKeyCode(value);\n        }\n      }\n\n      if (modifier) {\n        ret[modifier] = optional ? null : true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Compare.\n */\n\nfunction compareHotkey(object, event) {\n  for (var key in object) {\n    var expected = object[key];\n    var actual = void 0;\n\n    if (expected == null) {\n      continue;\n    }\n\n    if (key === 'key' && event.key != null) {\n      actual = event.key.toLowerCase();\n    } else if (key === 'which') {\n      actual = expected === 91 && event.which === 93 ? 91 : event.which;\n    } else {\n      actual = event[key];\n    }\n\n    if (actual == null && expected === false) {\n      continue;\n    }\n\n    if (actual !== expected) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Utils.\n */\n\nfunction toKeyCode(name) {\n  name = toKeyName(name);\n  var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n  return code;\n}\n\nfunction toKeyName(name) {\n  name = name.toLowerCase();\n  name = ALIASES[name] || name;\n  return name;\n}\n\n/**\n * Export.\n */\n\nexports.default = isHotkey;\nexports.isHotkey = isHotkey;\nexports.isCodeHotkey = isCodeHotkey;\nexports.isKeyHotkey = isKeyHotkey;\nexports.parseHotkey = parseHotkey;\nexports.compareHotkey = compareHotkey;\nexports.toKeyCode = toKeyCode;\nexports.toKeyName = toKeyName;","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport React, { useContext, useMemo, useState } from 'react';\nvar DialogContext = React.createContext({});\nvar DialogVisibleProvider = function (_a) {\n    var children = _a.children;\n    var _b = __read(useState(false), 2), visible = _b[0], setVisible = _b[1];\n    var value = useMemo(function () { return ({ visible: visible, setVisible: setVisible }); }, [visible, setVisible]);\n    return (React.createElement(DialogContext.Provider, { value: value }, children));\n};\nexport var useDialogIsVisible = function () {\n    var _a;\n    return (_a = useContext(DialogContext)) === null || _a === void 0 ? void 0 : _a.visible;\n};\nexport var useSetDialogIsVisible = function () {\n    var _a;\n    return (_a = useContext(DialogContext)) === null || _a === void 0 ? void 0 : _a.setVisible;\n};\nexport default DialogVisibleProvider;\n//# sourceMappingURL=DialogVisibleProvider.js.map","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","import compute from 'compute-scroll-into-view';\n\nfunction isOptionsObject(options) {\n  return options === Object(options) && Object.keys(options).length !== 0;\n}\n\nfunction defaultBehavior(actions, behavior) {\n  if (behavior === void 0) {\n    behavior = 'auto';\n  }\n\n  var canSmoothScroll = ('scrollBehavior' in document.body.style);\n  actions.forEach(function (_ref) {\n    var el = _ref.el,\n        top = _ref.top,\n        left = _ref.left;\n\n    if (el.scroll && canSmoothScroll) {\n      el.scroll({\n        top: top,\n        left: left,\n        behavior: behavior\n      });\n    } else {\n      el.scrollTop = top;\n      el.scrollLeft = left;\n    }\n  });\n}\n\nfunction getOptions(options) {\n  if (options === false) {\n    return {\n      block: 'end',\n      inline: 'nearest'\n    };\n  }\n\n  if (isOptionsObject(options)) {\n    return options;\n  }\n\n  return {\n    block: 'start',\n    inline: 'nearest'\n  };\n}\n\nfunction scrollIntoView(target, options) {\n  var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);\n\n  if (isOptionsObject(options) && typeof options.behavior === 'function') {\n    return options.behavior(isTargetAttached ? compute(target, options) : []);\n  }\n\n  if (!isTargetAttached) {\n    return;\n  }\n\n  var computeOptions = getOptions(options);\n  return defaultBehavior(compute(target, computeOptions), computeOptions.behavior);\n}\n\nexport default scrollIntoView;","'use strict'\n\nmodule.exports = direction\n\nvar RTL = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC'\nvar LTR =\n  'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' +\n  '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' +\n  '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF'\n\nvar rtl = new RegExp('^[^' + LTR + ']*[' + RTL + ']')\nvar ltr = new RegExp('^[^' + RTL + ']*[' + LTR + ']')\n\nfunction direction(value) {\n  value = String(value || '')\n\n  if (rtl.test(value)) {\n    return 'rtl'\n  }\n\n  if (ltr.test(value)) {\n    return 'ltr'\n  }\n\n  return 'neutral'\n}\n","var debounce = require('./debounce'),\n    isObject = require('./isObject');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nmodule.exports = throttle;\n"],"sourceRoot":""}